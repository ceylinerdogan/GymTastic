diff --git a/node_modules/react-native-svg/android/build.gradle b/node_modules/react-native-svg/android/build.gradle
index a4a57b5..55b899e 100644
--- a/node_modules/react-native-svg/android/build.gradle
+++ b/node_modules/react-native-svg/android/build.gradle
@@ -87,7 +87,7 @@ repositories {
 
 dependencies {
     if (isNewArchitectureEnabled()) {
-        implementation project(":ReactAndroid")
+        implementation 'com.facebook.react:react-android'
     } else {
         implementation 'com.facebook.react:react-native:+'
     }
@@ -95,9 +95,8 @@ dependencies {
 
 if (isNewArchitectureEnabled()) {
     react {
-        reactRoot = rootProject.file("../node_modules/react-native/")
-        jsRootDir = file("../src/fabric/")
-        codegenDir = rootProject.file("../node_modules/react-native-codegen/")
+        root = rootProject.file("../node_modules/react-native/")
+        codegenDir = rootProject.file("../node_modules/@react-native/codegen/")
         libraryName = "rnsvg"
         codegenJavaPackageName = "com.horcrux.rnsvg"
     }
diff --git a/node_modules/react-native-svg/android/build/generated/source/buildConfig/debug/com/horcrux/svg/BuildConfig.java b/node_modules/react-native-svg/android/build/generated/source/buildConfig/debug/com/horcrux/svg/BuildConfig.java
new file mode 100644
index 0000000..84f4e31
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/buildConfig/debug/com/horcrux/svg/BuildConfig.java
@@ -0,0 +1,12 @@
+/**
+ * Automatically generated file. DO NOT MODIFY
+ */
+package com.horcrux.svg;
+
+public final class BuildConfig {
+  public static final boolean DEBUG = Boolean.parseBoolean("true");
+  public static final String LIBRARY_PACKAGE_NAME = "com.horcrux.svg";
+  public static final String BUILD_TYPE = "debug";
+  // Field from default config.
+  public static final boolean IS_NEW_ARCHITECTURE_ENABLED = true;
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGCircleManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGCircleManagerDelegate.java
new file mode 100644
index 0000000..c81f02e
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGCircleManagerDelegate.java
@@ -0,0 +1,114 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGCircleManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGCircleManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGCircleManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "cx":
+        mViewManager.setCx(view, value == null ? null : (String) value);
+        break;
+      case "cy":
+        mViewManager.setCy(view, value == null ? null : (String) value);
+        break;
+      case "r":
+        mViewManager.setR(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGCircleManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGCircleManagerInterface.java
new file mode 100644
index 0000000..03bc95e
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGCircleManagerInterface.java
@@ -0,0 +1,46 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGCircleManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setCx(T view, @Nullable String value);
+  void setCy(T view, @Nullable String value);
+  void setR(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGClipPathManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGClipPathManagerDelegate.java
new file mode 100644
index 0000000..f17afcc
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGClipPathManagerDelegate.java
@@ -0,0 +1,114 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGClipPathManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGClipPathManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGClipPathManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, value == null ? null : (String) value);
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, value == null ? null : (String) value);
+        break;
+      case "font":
+        mViewManager.setFont(view, (ReadableMap) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGClipPathManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGClipPathManagerInterface.java
new file mode 100644
index 0000000..e1a88ee
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGClipPathManagerInterface.java
@@ -0,0 +1,46 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGClipPathManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFontSize(T view, @Nullable String value);
+  void setFontWeight(T view, @Nullable String value);
+  void setFont(T view, @Nullable ReadableMap value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGDefsManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGDefsManagerDelegate.java
new file mode 100644
index 0000000..69c54d3
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGDefsManagerDelegate.java
@@ -0,0 +1,65 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGDefsManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGDefsManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGDefsManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGDefsManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGDefsManagerInterface.java
new file mode 100644
index 0000000..d405b61
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGDefsManagerInterface.java
@@ -0,0 +1,29 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGDefsManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGEllipseManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGEllipseManagerDelegate.java
new file mode 100644
index 0000000..992d95b
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGEllipseManagerDelegate.java
@@ -0,0 +1,117 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGEllipseManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGEllipseManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGEllipseManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "cx":
+        mViewManager.setCx(view, value == null ? null : (String) value);
+        break;
+      case "cy":
+        mViewManager.setCy(view, value == null ? null : (String) value);
+        break;
+      case "rx":
+        mViewManager.setRx(view, value == null ? null : (String) value);
+        break;
+      case "ry":
+        mViewManager.setRy(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGEllipseManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGEllipseManagerInterface.java
new file mode 100644
index 0000000..0fddf4b
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGEllipseManagerInterface.java
@@ -0,0 +1,47 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGEllipseManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setCx(T view, @Nullable String value);
+  void setCy(T view, @Nullable String value);
+  void setRx(T view, @Nullable String value);
+  void setRy(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGForeignObjectManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGForeignObjectManagerDelegate.java
new file mode 100644
index 0000000..a2d504c
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGForeignObjectManagerDelegate.java
@@ -0,0 +1,126 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGForeignObjectManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGForeignObjectManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGForeignObjectManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, value == null ? null : (String) value);
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, value == null ? null : (String) value);
+        break;
+      case "font":
+        mViewManager.setFont(view, (ReadableMap) value);
+        break;
+      case "x":
+        mViewManager.setX(view, value == null ? null : (String) value);
+        break;
+      case "y":
+        mViewManager.setY(view, value == null ? null : (String) value);
+        break;
+      case "height":
+        mViewManager.setHeight(view, value == null ? null : (String) value);
+        break;
+      case "width":
+        mViewManager.setWidth(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGForeignObjectManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGForeignObjectManagerInterface.java
new file mode 100644
index 0000000..b8fa396
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGForeignObjectManagerInterface.java
@@ -0,0 +1,50 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGForeignObjectManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFontSize(T view, @Nullable String value);
+  void setFontWeight(T view, @Nullable String value);
+  void setFont(T view, @Nullable ReadableMap value);
+  void setX(T view, @Nullable String value);
+  void setY(T view, @Nullable String value);
+  void setHeight(T view, @Nullable String value);
+  void setWidth(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGGroupManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGGroupManagerDelegate.java
new file mode 100644
index 0000000..03b03d8
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGGroupManagerDelegate.java
@@ -0,0 +1,114 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGGroupManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGGroupManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGGroupManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, value == null ? null : (String) value);
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, value == null ? null : (String) value);
+        break;
+      case "font":
+        mViewManager.setFont(view, (ReadableMap) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGGroupManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGGroupManagerInterface.java
new file mode 100644
index 0000000..cef7508
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGGroupManagerInterface.java
@@ -0,0 +1,46 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGGroupManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFontSize(T view, @Nullable String value);
+  void setFontWeight(T view, @Nullable String value);
+  void setFont(T view, @Nullable ReadableMap value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGImageManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGImageManagerDelegate.java
new file mode 100644
index 0000000..6953efb
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGImageManagerDelegate.java
@@ -0,0 +1,126 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGImageManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGImageManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGImageManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "x":
+        mViewManager.setX(view, value == null ? null : (String) value);
+        break;
+      case "y":
+        mViewManager.setY(view, value == null ? null : (String) value);
+        break;
+      case "width":
+        mViewManager.setWidth(view, value == null ? null : (String) value);
+        break;
+      case "height":
+        mViewManager.setHeight(view, value == null ? null : (String) value);
+        break;
+      case "src":
+        mViewManager.setSrc(view, (ReadableMap) value);
+        break;
+      case "align":
+        mViewManager.setAlign(view, value == null ? null : (String) value);
+        break;
+      case "meetOrSlice":
+        mViewManager.setMeetOrSlice(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGImageManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGImageManagerInterface.java
new file mode 100644
index 0000000..91409ab
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGImageManagerInterface.java
@@ -0,0 +1,50 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGImageManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setX(T view, @Nullable String value);
+  void setY(T view, @Nullable String value);
+  void setWidth(T view, @Nullable String value);
+  void setHeight(T view, @Nullable String value);
+  void setSrc(T view, @Nullable ReadableMap value);
+  void setAlign(T view, @Nullable String value);
+  void setMeetOrSlice(T view, int value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLineManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLineManagerDelegate.java
new file mode 100644
index 0000000..ffb3f1d
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLineManagerDelegate.java
@@ -0,0 +1,117 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGLineManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGLineManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGLineManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "x1":
+        mViewManager.setX1(view, value == null ? null : (String) value);
+        break;
+      case "y1":
+        mViewManager.setY1(view, value == null ? null : (String) value);
+        break;
+      case "x2":
+        mViewManager.setX2(view, value == null ? null : (String) value);
+        break;
+      case "y2":
+        mViewManager.setY2(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLineManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLineManagerInterface.java
new file mode 100644
index 0000000..1624e36
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLineManagerInterface.java
@@ -0,0 +1,47 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGLineManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setX1(T view, @Nullable String value);
+  void setY1(T view, @Nullable String value);
+  void setX2(T view, @Nullable String value);
+  void setY2(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLinearGradientManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLinearGradientManagerDelegate.java
new file mode 100644
index 0000000..ea08d77
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLinearGradientManagerDelegate.java
@@ -0,0 +1,86 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGLinearGradientManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGLinearGradientManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGLinearGradientManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "x1":
+        mViewManager.setX1(view, value == null ? null : (String) value);
+        break;
+      case "y1":
+        mViewManager.setY1(view, value == null ? null : (String) value);
+        break;
+      case "x2":
+        mViewManager.setX2(view, value == null ? null : (String) value);
+        break;
+      case "y2":
+        mViewManager.setY2(view, value == null ? null : (String) value);
+        break;
+      case "gradient":
+        mViewManager.setGradient(view, (ReadableArray) value);
+        break;
+      case "gradientUnits":
+        mViewManager.setGradientUnits(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "gradientTransform":
+        mViewManager.setGradientTransform(view, (ReadableArray) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLinearGradientManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLinearGradientManagerInterface.java
new file mode 100644
index 0000000..3acc529
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGLinearGradientManagerInterface.java
@@ -0,0 +1,36 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGLinearGradientManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setX1(T view, @Nullable String value);
+  void setY1(T view, @Nullable String value);
+  void setX2(T view, @Nullable String value);
+  void setY2(T view, @Nullable String value);
+  void setGradient(T view, @Nullable ReadableArray value);
+  void setGradientUnits(T view, int value);
+  void setGradientTransform(T view, @Nullable ReadableArray value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMarkerManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMarkerManagerDelegate.java
new file mode 100644
index 0000000..9055a4d
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMarkerManagerDelegate.java
@@ -0,0 +1,150 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGMarkerManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGMarkerManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGMarkerManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, value == null ? null : (String) value);
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, value == null ? null : (String) value);
+        break;
+      case "font":
+        mViewManager.setFont(view, (ReadableMap) value);
+        break;
+      case "refX":
+        mViewManager.setRefX(view, value == null ? null : (String) value);
+        break;
+      case "refY":
+        mViewManager.setRefY(view, value == null ? null : (String) value);
+        break;
+      case "markerHeight":
+        mViewManager.setMarkerHeight(view, value == null ? null : (String) value);
+        break;
+      case "markerWidth":
+        mViewManager.setMarkerWidth(view, value == null ? null : (String) value);
+        break;
+      case "markerUnits":
+        mViewManager.setMarkerUnits(view, value == null ? null : (String) value);
+        break;
+      case "orient":
+        mViewManager.setOrient(view, value == null ? null : (String) value);
+        break;
+      case "minX":
+        mViewManager.setMinX(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "minY":
+        mViewManager.setMinY(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vbWidth":
+        mViewManager.setVbWidth(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vbHeight":
+        mViewManager.setVbHeight(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "align":
+        mViewManager.setAlign(view, value == null ? null : (String) value);
+        break;
+      case "meetOrSlice":
+        mViewManager.setMeetOrSlice(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMarkerManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMarkerManagerInterface.java
new file mode 100644
index 0000000..1dd6000
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMarkerManagerInterface.java
@@ -0,0 +1,58 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGMarkerManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFontSize(T view, @Nullable String value);
+  void setFontWeight(T view, @Nullable String value);
+  void setFont(T view, @Nullable ReadableMap value);
+  void setRefX(T view, @Nullable String value);
+  void setRefY(T view, @Nullable String value);
+  void setMarkerHeight(T view, @Nullable String value);
+  void setMarkerWidth(T view, @Nullable String value);
+  void setMarkerUnits(T view, @Nullable String value);
+  void setOrient(T view, @Nullable String value);
+  void setMinX(T view, float value);
+  void setMinY(T view, float value);
+  void setVbWidth(T view, float value);
+  void setVbHeight(T view, float value);
+  void setAlign(T view, @Nullable String value);
+  void setMeetOrSlice(T view, int value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMaskManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMaskManagerDelegate.java
new file mode 100644
index 0000000..c62573e
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMaskManagerDelegate.java
@@ -0,0 +1,135 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGMaskManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGMaskManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGMaskManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, value == null ? null : (String) value);
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, value == null ? null : (String) value);
+        break;
+      case "font":
+        mViewManager.setFont(view, (ReadableMap) value);
+        break;
+      case "x":
+        mViewManager.setX(view, value == null ? null : (String) value);
+        break;
+      case "y":
+        mViewManager.setY(view, value == null ? null : (String) value);
+        break;
+      case "height":
+        mViewManager.setHeight(view, value == null ? null : (String) value);
+        break;
+      case "width":
+        mViewManager.setWidth(view, value == null ? null : (String) value);
+        break;
+      case "maskUnits":
+        mViewManager.setMaskUnits(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "maskContentUnits":
+        mViewManager.setMaskContentUnits(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "maskTransform":
+        mViewManager.setMaskTransform(view, (ReadableArray) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMaskManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMaskManagerInterface.java
new file mode 100644
index 0000000..742ff70
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGMaskManagerInterface.java
@@ -0,0 +1,53 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGMaskManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFontSize(T view, @Nullable String value);
+  void setFontWeight(T view, @Nullable String value);
+  void setFont(T view, @Nullable ReadableMap value);
+  void setX(T view, @Nullable String value);
+  void setY(T view, @Nullable String value);
+  void setHeight(T view, @Nullable String value);
+  void setWidth(T view, @Nullable String value);
+  void setMaskUnits(T view, int value);
+  void setMaskContentUnits(T view, int value);
+  void setMaskTransform(T view, @Nullable ReadableArray value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPathManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPathManagerDelegate.java
new file mode 100644
index 0000000..cfe017e
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPathManagerDelegate.java
@@ -0,0 +1,108 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGPathManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGPathManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGPathManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "d":
+        mViewManager.setD(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPathManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPathManagerInterface.java
new file mode 100644
index 0000000..a82ecd5
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPathManagerInterface.java
@@ -0,0 +1,44 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGPathManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setD(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPatternManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPatternManagerDelegate.java
new file mode 100644
index 0000000..67640c1
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPatternManagerDelegate.java
@@ -0,0 +1,153 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGPatternManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGPatternManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGPatternManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, value == null ? null : (String) value);
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, value == null ? null : (String) value);
+        break;
+      case "font":
+        mViewManager.setFont(view, (ReadableMap) value);
+        break;
+      case "x":
+        mViewManager.setX(view, value == null ? null : (String) value);
+        break;
+      case "y":
+        mViewManager.setY(view, value == null ? null : (String) value);
+        break;
+      case "height":
+        mViewManager.setHeight(view, value == null ? null : (String) value);
+        break;
+      case "width":
+        mViewManager.setWidth(view, value == null ? null : (String) value);
+        break;
+      case "patternUnits":
+        mViewManager.setPatternUnits(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "patternContentUnits":
+        mViewManager.setPatternContentUnits(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "patternTransform":
+        mViewManager.setPatternTransform(view, (ReadableArray) value);
+        break;
+      case "minX":
+        mViewManager.setMinX(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "minY":
+        mViewManager.setMinY(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vbWidth":
+        mViewManager.setVbWidth(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vbHeight":
+        mViewManager.setVbHeight(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "align":
+        mViewManager.setAlign(view, value == null ? null : (String) value);
+        break;
+      case "meetOrSlice":
+        mViewManager.setMeetOrSlice(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPatternManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPatternManagerInterface.java
new file mode 100644
index 0000000..d0d8126
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGPatternManagerInterface.java
@@ -0,0 +1,59 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGPatternManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFontSize(T view, @Nullable String value);
+  void setFontWeight(T view, @Nullable String value);
+  void setFont(T view, @Nullable ReadableMap value);
+  void setX(T view, @Nullable String value);
+  void setY(T view, @Nullable String value);
+  void setHeight(T view, @Nullable String value);
+  void setWidth(T view, @Nullable String value);
+  void setPatternUnits(T view, int value);
+  void setPatternContentUnits(T view, int value);
+  void setPatternTransform(T view, @Nullable ReadableArray value);
+  void setMinX(T view, float value);
+  void setMinY(T view, float value);
+  void setVbWidth(T view, float value);
+  void setVbHeight(T view, float value);
+  void setAlign(T view, @Nullable String value);
+  void setMeetOrSlice(T view, int value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRadialGradientManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRadialGradientManagerDelegate.java
new file mode 100644
index 0000000..25ee39f
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRadialGradientManagerDelegate.java
@@ -0,0 +1,92 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGRadialGradientManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGRadialGradientManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGRadialGradientManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fx":
+        mViewManager.setFx(view, value == null ? null : (String) value);
+        break;
+      case "fy":
+        mViewManager.setFy(view, value == null ? null : (String) value);
+        break;
+      case "cx":
+        mViewManager.setCx(view, value == null ? null : (String) value);
+        break;
+      case "cy":
+        mViewManager.setCy(view, value == null ? null : (String) value);
+        break;
+      case "rx":
+        mViewManager.setRx(view, value == null ? null : (String) value);
+        break;
+      case "ry":
+        mViewManager.setRy(view, value == null ? null : (String) value);
+        break;
+      case "gradient":
+        mViewManager.setGradient(view, (ReadableArray) value);
+        break;
+      case "gradientUnits":
+        mViewManager.setGradientUnits(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "gradientTransform":
+        mViewManager.setGradientTransform(view, (ReadableArray) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRadialGradientManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRadialGradientManagerInterface.java
new file mode 100644
index 0000000..c327b9a
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRadialGradientManagerInterface.java
@@ -0,0 +1,38 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface RNSVGRadialGradientManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFx(T view, @Nullable String value);
+  void setFy(T view, @Nullable String value);
+  void setCx(T view, @Nullable String value);
+  void setCy(T view, @Nullable String value);
+  void setRx(T view, @Nullable String value);
+  void setRy(T view, @Nullable String value);
+  void setGradient(T view, @Nullable ReadableArray value);
+  void setGradientUnits(T view, int value);
+  void setGradientTransform(T view, @Nullable ReadableArray value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRectManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRectManagerDelegate.java
new file mode 100644
index 0000000..d59d6d1
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRectManagerDelegate.java
@@ -0,0 +1,123 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGRectManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGRectManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGRectManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "x":
+        mViewManager.setX(view, value == null ? null : (String) value);
+        break;
+      case "y":
+        mViewManager.setY(view, value == null ? null : (String) value);
+        break;
+      case "height":
+        mViewManager.setHeight(view, value == null ? null : (String) value);
+        break;
+      case "width":
+        mViewManager.setWidth(view, value == null ? null : (String) value);
+        break;
+      case "rx":
+        mViewManager.setRx(view, value == null ? null : (String) value);
+        break;
+      case "ry":
+        mViewManager.setRy(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRectManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRectManagerInterface.java
new file mode 100644
index 0000000..90b0718
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGRectManagerInterface.java
@@ -0,0 +1,49 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGRectManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setX(T view, @Nullable String value);
+  void setY(T view, @Nullable String value);
+  void setHeight(T view, @Nullable String value);
+  void setWidth(T view, @Nullable String value);
+  void setRx(T view, @Nullable String value);
+  void setRy(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSvgViewManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSvgViewManagerDelegate.java
new file mode 100644
index 0000000..24b9d4c
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSvgViewManagerDelegate.java
@@ -0,0 +1,62 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGSvgViewManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGSvgViewManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGSvgViewManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "bbWidth":
+        mViewManager.setBbWidth(view, value == null ? null : (String) value);
+        break;
+      case "bbHeight":
+        mViewManager.setBbHeight(view, value == null ? null : (String) value);
+        break;
+      case "minX":
+        mViewManager.setMinX(view, value == null ? Float.NaN : ((Double) value).floatValue());
+        break;
+      case "minY":
+        mViewManager.setMinY(view, value == null ? Float.NaN : ((Double) value).floatValue());
+        break;
+      case "vbWidth":
+        mViewManager.setVbWidth(view, value == null ? Float.NaN : ((Double) value).floatValue());
+        break;
+      case "vbHeight":
+        mViewManager.setVbHeight(view, value == null ? Float.NaN : ((Double) value).floatValue());
+        break;
+      case "align":
+        mViewManager.setAlign(view, value == null ? null : (String) value);
+        break;
+      case "meetOrSlice":
+        mViewManager.setMeetOrSlice(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "tintColor":
+        mViewManager.setTintColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "color":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSvgViewManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSvgViewManagerInterface.java
new file mode 100644
index 0000000..4abe553
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSvgViewManagerInterface.java
@@ -0,0 +1,27 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+
+public interface RNSVGSvgViewManagerInterface<T extends View> {
+  void setBbWidth(T view, @Nullable String value);
+  void setBbHeight(T view, @Nullable String value);
+  void setMinX(T view, float value);
+  void setMinY(T view, float value);
+  void setVbWidth(T view, float value);
+  void setVbHeight(T view, float value);
+  void setAlign(T view, @Nullable String value);
+  void setMeetOrSlice(T view, int value);
+  void setTintColor(T view, @Nullable Integer value);
+  void setColor(T view, @Nullable Integer value);
+  void setPointerEvents(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSymbolManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSymbolManagerDelegate.java
new file mode 100644
index 0000000..9fbe520
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSymbolManagerDelegate.java
@@ -0,0 +1,132 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGSymbolManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGSymbolManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGSymbolManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, value == null ? null : (String) value);
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, value == null ? null : (String) value);
+        break;
+      case "font":
+        mViewManager.setFont(view, (ReadableMap) value);
+        break;
+      case "minX":
+        mViewManager.setMinX(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "minY":
+        mViewManager.setMinY(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vbWidth":
+        mViewManager.setVbWidth(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vbHeight":
+        mViewManager.setVbHeight(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "align":
+        mViewManager.setAlign(view, value == null ? null : (String) value);
+        break;
+      case "meetOrSlice":
+        mViewManager.setMeetOrSlice(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSymbolManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSymbolManagerInterface.java
new file mode 100644
index 0000000..1a60ba2
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGSymbolManagerInterface.java
@@ -0,0 +1,52 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGSymbolManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFontSize(T view, @Nullable String value);
+  void setFontWeight(T view, @Nullable String value);
+  void setFont(T view, @Nullable ReadableMap value);
+  void setMinX(T view, float value);
+  void setMinY(T view, float value);
+  void setVbWidth(T view, float value);
+  void setVbHeight(T view, float value);
+  void setAlign(T view, @Nullable String value);
+  void setMeetOrSlice(T view, int value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTSpanManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTSpanManagerDelegate.java
new file mode 100644
index 0000000..808f813
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTSpanManagerDelegate.java
@@ -0,0 +1,150 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGTSpanManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGTSpanManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGTSpanManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, value == null ? null : (String) value);
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, value == null ? null : (String) value);
+        break;
+      case "font":
+        mViewManager.setFont(view, (ReadableMap) value);
+        break;
+      case "dx":
+        mViewManager.setDx(view, (ReadableArray) value);
+        break;
+      case "dy":
+        mViewManager.setDy(view, (ReadableArray) value);
+        break;
+      case "x":
+        mViewManager.setX(view, (ReadableArray) value);
+        break;
+      case "y":
+        mViewManager.setY(view, (ReadableArray) value);
+        break;
+      case "rotate":
+        mViewManager.setRotate(view, (ReadableArray) value);
+        break;
+      case "inlineSize":
+        mViewManager.setInlineSize(view, value == null ? null : (String) value);
+        break;
+      case "textLength":
+        mViewManager.setTextLength(view, value == null ? null : (String) value);
+        break;
+      case "baselineShift":
+        mViewManager.setBaselineShift(view, value == null ? null : (String) value);
+        break;
+      case "lengthAdjust":
+        mViewManager.setLengthAdjust(view, value == null ? null : (String) value);
+        break;
+      case "alignmentBaseline":
+        mViewManager.setAlignmentBaseline(view, value == null ? null : (String) value);
+        break;
+      case "verticalAlign":
+        mViewManager.setVerticalAlign(view, value == null ? null : (String) value);
+        break;
+      case "content":
+        mViewManager.setContent(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTSpanManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTSpanManagerInterface.java
new file mode 100644
index 0000000..b9d429a
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTSpanManagerInterface.java
@@ -0,0 +1,58 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGTSpanManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFontSize(T view, @Nullable String value);
+  void setFontWeight(T view, @Nullable String value);
+  void setFont(T view, @Nullable ReadableMap value);
+  void setDx(T view, @Nullable ReadableArray value);
+  void setDy(T view, @Nullable ReadableArray value);
+  void setX(T view, @Nullable ReadableArray value);
+  void setY(T view, @Nullable ReadableArray value);
+  void setRotate(T view, @Nullable ReadableArray value);
+  void setInlineSize(T view, @Nullable String value);
+  void setTextLength(T view, @Nullable String value);
+  void setBaselineShift(T view, @Nullable String value);
+  void setLengthAdjust(T view, @Nullable String value);
+  void setAlignmentBaseline(T view, @Nullable String value);
+  void setVerticalAlign(T view, @Nullable String value);
+  void setContent(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextManagerDelegate.java
new file mode 100644
index 0000000..6a71861
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextManagerDelegate.java
@@ -0,0 +1,147 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGTextManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGTextManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGTextManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, value == null ? null : (String) value);
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, value == null ? null : (String) value);
+        break;
+      case "font":
+        mViewManager.setFont(view, (ReadableMap) value);
+        break;
+      case "dx":
+        mViewManager.setDx(view, (ReadableArray) value);
+        break;
+      case "dy":
+        mViewManager.setDy(view, (ReadableArray) value);
+        break;
+      case "x":
+        mViewManager.setX(view, (ReadableArray) value);
+        break;
+      case "y":
+        mViewManager.setY(view, (ReadableArray) value);
+        break;
+      case "rotate":
+        mViewManager.setRotate(view, (ReadableArray) value);
+        break;
+      case "inlineSize":
+        mViewManager.setInlineSize(view, value == null ? null : (String) value);
+        break;
+      case "textLength":
+        mViewManager.setTextLength(view, value == null ? null : (String) value);
+        break;
+      case "baselineShift":
+        mViewManager.setBaselineShift(view, value == null ? null : (String) value);
+        break;
+      case "lengthAdjust":
+        mViewManager.setLengthAdjust(view, value == null ? null : (String) value);
+        break;
+      case "alignmentBaseline":
+        mViewManager.setAlignmentBaseline(view, value == null ? null : (String) value);
+        break;
+      case "verticalAlign":
+        mViewManager.setVerticalAlign(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextManagerInterface.java
new file mode 100644
index 0000000..31d1433
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextManagerInterface.java
@@ -0,0 +1,57 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGTextManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFontSize(T view, @Nullable String value);
+  void setFontWeight(T view, @Nullable String value);
+  void setFont(T view, @Nullable ReadableMap value);
+  void setDx(T view, @Nullable ReadableArray value);
+  void setDy(T view, @Nullable ReadableArray value);
+  void setX(T view, @Nullable ReadableArray value);
+  void setY(T view, @Nullable ReadableArray value);
+  void setRotate(T view, @Nullable ReadableArray value);
+  void setInlineSize(T view, @Nullable String value);
+  void setTextLength(T view, @Nullable String value);
+  void setBaselineShift(T view, @Nullable String value);
+  void setLengthAdjust(T view, @Nullable String value);
+  void setAlignmentBaseline(T view, @Nullable String value);
+  void setVerticalAlign(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextPathManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextPathManagerDelegate.java
new file mode 100644
index 0000000..32cb866
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextPathManagerDelegate.java
@@ -0,0 +1,165 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGTextPathManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGTextPathManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGTextPathManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "fontSize":
+        mViewManager.setFontSize(view, value == null ? null : (String) value);
+        break;
+      case "fontWeight":
+        mViewManager.setFontWeight(view, value == null ? null : (String) value);
+        break;
+      case "font":
+        mViewManager.setFont(view, (ReadableMap) value);
+        break;
+      case "dx":
+        mViewManager.setDx(view, (ReadableArray) value);
+        break;
+      case "dy":
+        mViewManager.setDy(view, (ReadableArray) value);
+        break;
+      case "x":
+        mViewManager.setX(view, (ReadableArray) value);
+        break;
+      case "y":
+        mViewManager.setY(view, (ReadableArray) value);
+        break;
+      case "rotate":
+        mViewManager.setRotate(view, (ReadableArray) value);
+        break;
+      case "inlineSize":
+        mViewManager.setInlineSize(view, value == null ? null : (String) value);
+        break;
+      case "textLength":
+        mViewManager.setTextLength(view, value == null ? null : (String) value);
+        break;
+      case "baselineShift":
+        mViewManager.setBaselineShift(view, value == null ? null : (String) value);
+        break;
+      case "lengthAdjust":
+        mViewManager.setLengthAdjust(view, value == null ? null : (String) value);
+        break;
+      case "alignmentBaseline":
+        mViewManager.setAlignmentBaseline(view, value == null ? null : (String) value);
+        break;
+      case "verticalAlign":
+        mViewManager.setVerticalAlign(view, value == null ? null : (String) value);
+        break;
+      case "href":
+        mViewManager.setHref(view, value == null ? null : (String) value);
+        break;
+      case "side":
+        mViewManager.setSide(view, value == null ? null : (String) value);
+        break;
+      case "method":
+        mViewManager.setMethod(view, value == null ? null : (String) value);
+        break;
+      case "midLine":
+        mViewManager.setMidLine(view, value == null ? null : (String) value);
+        break;
+      case "spacing":
+        mViewManager.setSpacing(view, value == null ? null : (String) value);
+        break;
+      case "startOffset":
+        mViewManager.setStartOffset(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextPathManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextPathManagerInterface.java
new file mode 100644
index 0000000..ba84114
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGTextPathManagerInterface.java
@@ -0,0 +1,63 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGTextPathManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setFontSize(T view, @Nullable String value);
+  void setFontWeight(T view, @Nullable String value);
+  void setFont(T view, @Nullable ReadableMap value);
+  void setDx(T view, @Nullable ReadableArray value);
+  void setDy(T view, @Nullable ReadableArray value);
+  void setX(T view, @Nullable ReadableArray value);
+  void setY(T view, @Nullable ReadableArray value);
+  void setRotate(T view, @Nullable ReadableArray value);
+  void setInlineSize(T view, @Nullable String value);
+  void setTextLength(T view, @Nullable String value);
+  void setBaselineShift(T view, @Nullable String value);
+  void setLengthAdjust(T view, @Nullable String value);
+  void setAlignmentBaseline(T view, @Nullable String value);
+  void setVerticalAlign(T view, @Nullable String value);
+  void setHref(T view, @Nullable String value);
+  void setSide(T view, @Nullable String value);
+  void setMethod(T view, @Nullable String value);
+  void setMidLine(T view, @Nullable String value);
+  void setSpacing(T view, @Nullable String value);
+  void setStartOffset(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGUseManagerDelegate.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGUseManagerDelegate.java
new file mode 100644
index 0000000..2d64302
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGUseManagerDelegate.java
@@ -0,0 +1,120 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class RNSVGUseManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNSVGUseManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public RNSVGUseManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "name":
+        mViewManager.setName(view, value == null ? null : (String) value);
+        break;
+      case "opacity":
+        mViewManager.setOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "matrix":
+        mViewManager.setMatrix(view, (ReadableArray) value);
+        break;
+      case "mask":
+        mViewManager.setMask(view, value == null ? null : (String) value);
+        break;
+      case "markerStart":
+        mViewManager.setMarkerStart(view, value == null ? null : (String) value);
+        break;
+      case "markerMid":
+        mViewManager.setMarkerMid(view, value == null ? null : (String) value);
+        break;
+      case "markerEnd":
+        mViewManager.setMarkerEnd(view, value == null ? null : (String) value);
+        break;
+      case "clipPath":
+        mViewManager.setClipPath(view, value == null ? null : (String) value);
+        break;
+      case "clipRule":
+        mViewManager.setClipRule(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "responsible":
+        mViewManager.setResponsible(view, value == null ? false : (boolean) value);
+        break;
+      case "display":
+        mViewManager.setDisplay(view, value == null ? null : (String) value);
+        break;
+      case "pointerEvents":
+        mViewManager.setPointerEvents(view, value == null ? null : (String) value);
+        break;
+      case "fill":
+        mViewManager.setFill(view, (ReadableMap) value);
+        break;
+      case "fillOpacity":
+        mViewManager.setFillOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "fillRule":
+        mViewManager.setFillRule(view, value == null ? 1 : ((Double) value).intValue());
+        break;
+      case "stroke":
+        mViewManager.setStroke(view, (ReadableMap) value);
+        break;
+      case "strokeOpacity":
+        mViewManager.setStrokeOpacity(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case "strokeWidth":
+        mViewManager.setStrokeWidth(view, value == null ? "1" : (String) value);
+        break;
+      case "strokeLinecap":
+        mViewManager.setStrokeLinecap(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeLinejoin":
+        mViewManager.setStrokeLinejoin(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "strokeDasharray":
+        mViewManager.setStrokeDasharray(view, (ReadableArray) value);
+        break;
+      case "strokeDashoffset":
+        mViewManager.setStrokeDashoffset(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "strokeMiterlimit":
+        mViewManager.setStrokeMiterlimit(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case "vectorEffect":
+        mViewManager.setVectorEffect(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "propList":
+        mViewManager.setPropList(view, (ReadableArray) value);
+        break;
+      case "href":
+        mViewManager.setHref(view, value == null ? null : (String) value);
+        break;
+      case "x":
+        mViewManager.setX(view, value == null ? null : (String) value);
+        break;
+      case "y":
+        mViewManager.setY(view, value == null ? null : (String) value);
+        break;
+      case "height":
+        mViewManager.setHeight(view, value == null ? null : (String) value);
+        break;
+      case "width":
+        mViewManager.setWidth(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGUseManagerInterface.java b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGUseManagerInterface.java
new file mode 100644
index 0000000..a0cfb19
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/java/com/facebook/react/viewmanagers/RNSVGUseManagerInterface.java
@@ -0,0 +1,48 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface RNSVGUseManagerInterface<T extends View> {
+  void setName(T view, @Nullable String value);
+  void setOpacity(T view, float value);
+  void setMatrix(T view, @Nullable ReadableArray value);
+  void setMask(T view, @Nullable String value);
+  void setMarkerStart(T view, @Nullable String value);
+  void setMarkerMid(T view, @Nullable String value);
+  void setMarkerEnd(T view, @Nullable String value);
+  void setClipPath(T view, @Nullable String value);
+  void setClipRule(T view, int value);
+  void setResponsible(T view, boolean value);
+  void setDisplay(T view, @Nullable String value);
+  void setPointerEvents(T view, @Nullable String value);
+  void setFill(T view, @Nullable ReadableMap value);
+  void setFillOpacity(T view, float value);
+  void setFillRule(T view, int value);
+  void setStroke(T view, @Nullable ReadableMap value);
+  void setStrokeOpacity(T view, float value);
+  void setStrokeWidth(T view, @Nullable String value);
+  void setStrokeLinecap(T view, int value);
+  void setStrokeLinejoin(T view, int value);
+  void setStrokeDasharray(T view, @Nullable ReadableArray value);
+  void setStrokeDashoffset(T view, float value);
+  void setStrokeMiterlimit(T view, float value);
+  void setVectorEffect(T view, int value);
+  void setPropList(T view, @Nullable ReadableArray value);
+  void setHref(T view, @Nullable String value);
+  void setX(T view, @Nullable String value);
+  void setY(T view, @Nullable String value);
+  void setHeight(T view, @Nullable String value);
+  void setWidth(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/CMakeLists.txt b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/CMakeLists.txt
new file mode 100644
index 0000000..0e77cf9
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/CMakeLists.txt
@@ -0,0 +1,36 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+file(GLOB react_codegen_SRCS CONFIGURE_DEPENDS *.cpp react/renderer/components/rnsvg/*.cpp)
+
+add_library(
+  react_codegen_rnsvg
+  OBJECT
+  ${react_codegen_SRCS}
+)
+
+target_include_directories(react_codegen_rnsvg PUBLIC . react/renderer/components/rnsvg)
+
+target_link_libraries(
+  react_codegen_rnsvg
+  fbjni
+  jsi
+  # We need to link different libraries based on whether we are building rncore or not, that's necessary
+  # because we want to break a circular dependency between react_codegen_rncore and reactnative
+  reactnative
+)
+
+target_compile_options(
+  react_codegen_rnsvg
+  PRIVATE
+  -DLOG_TAG=\"ReactNative\"
+  -fexceptions
+  -frtti
+  -std=c++20
+  -Wall
+)
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ComponentDescriptors.cpp b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ComponentDescriptors.cpp
new file mode 100644
index 0000000..719c21f
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ComponentDescriptors.cpp
@@ -0,0 +1,42 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorCpp.js
+ */
+
+#include <react/renderer/components/rnsvg/ComponentDescriptors.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+#include <react/renderer/componentregistry/ComponentDescriptorProviderRegistry.h>
+
+namespace facebook::react {
+
+void rnsvg_registerComponentDescriptorsFromCodegen(
+  std::shared_ptr<const ComponentDescriptorProviderRegistry> registry) {
+registry->add(concreteComponentDescriptorProvider<RNSVGCircleComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGClipPathComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGDefsComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGEllipseComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGForeignObjectComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGGroupComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGImageComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGLinearGradientComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGLineComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGMarkerComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGMaskComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGPathComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGPatternComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGRadialGradientComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGRectComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGSvgViewComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGSymbolComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGTextComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGTextPathComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGTSpanComponentDescriptor>());
+registry->add(concreteComponentDescriptorProvider<RNSVGUseComponentDescriptor>());
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ComponentDescriptors.h b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ComponentDescriptors.h
new file mode 100644
index 0000000..624c316
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ComponentDescriptors.h
@@ -0,0 +1,44 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/rnsvg/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+#include <react/renderer/componentregistry/ComponentDescriptorProviderRegistry.h>
+
+namespace facebook::react {
+
+using RNSVGCircleComponentDescriptor = ConcreteComponentDescriptor<RNSVGCircleShadowNode>;
+using RNSVGClipPathComponentDescriptor = ConcreteComponentDescriptor<RNSVGClipPathShadowNode>;
+using RNSVGDefsComponentDescriptor = ConcreteComponentDescriptor<RNSVGDefsShadowNode>;
+using RNSVGEllipseComponentDescriptor = ConcreteComponentDescriptor<RNSVGEllipseShadowNode>;
+using RNSVGForeignObjectComponentDescriptor = ConcreteComponentDescriptor<RNSVGForeignObjectShadowNode>;
+using RNSVGGroupComponentDescriptor = ConcreteComponentDescriptor<RNSVGGroupShadowNode>;
+using RNSVGImageComponentDescriptor = ConcreteComponentDescriptor<RNSVGImageShadowNode>;
+using RNSVGLinearGradientComponentDescriptor = ConcreteComponentDescriptor<RNSVGLinearGradientShadowNode>;
+using RNSVGLineComponentDescriptor = ConcreteComponentDescriptor<RNSVGLineShadowNode>;
+using RNSVGMarkerComponentDescriptor = ConcreteComponentDescriptor<RNSVGMarkerShadowNode>;
+using RNSVGMaskComponentDescriptor = ConcreteComponentDescriptor<RNSVGMaskShadowNode>;
+using RNSVGPathComponentDescriptor = ConcreteComponentDescriptor<RNSVGPathShadowNode>;
+using RNSVGPatternComponentDescriptor = ConcreteComponentDescriptor<RNSVGPatternShadowNode>;
+using RNSVGRadialGradientComponentDescriptor = ConcreteComponentDescriptor<RNSVGRadialGradientShadowNode>;
+using RNSVGRectComponentDescriptor = ConcreteComponentDescriptor<RNSVGRectShadowNode>;
+using RNSVGSvgViewComponentDescriptor = ConcreteComponentDescriptor<RNSVGSvgViewShadowNode>;
+using RNSVGSymbolComponentDescriptor = ConcreteComponentDescriptor<RNSVGSymbolShadowNode>;
+using RNSVGTextComponentDescriptor = ConcreteComponentDescriptor<RNSVGTextShadowNode>;
+using RNSVGTextPathComponentDescriptor = ConcreteComponentDescriptor<RNSVGTextPathShadowNode>;
+using RNSVGTSpanComponentDescriptor = ConcreteComponentDescriptor<RNSVGTSpanShadowNode>;
+using RNSVGUseComponentDescriptor = ConcreteComponentDescriptor<RNSVGUseShadowNode>;
+
+void rnsvg_registerComponentDescriptorsFromCodegen(
+  std::shared_ptr<const ComponentDescriptorProviderRegistry> registry);
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/EventEmitters.cpp b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/EventEmitters.cpp
new file mode 100644
index 0000000..5f4279e
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/EventEmitters.cpp
@@ -0,0 +1,36 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/rnsvg/EventEmitters.h>
+
+
+namespace facebook::react {
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/EventEmitters.h b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/EventEmitters.h
new file mode 100644
index 0000000..e0ada08
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/EventEmitters.h
@@ -0,0 +1,163 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+
+namespace facebook::react {
+class RNSVGCircleEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGClipPathEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGDefsEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGEllipseEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGForeignObjectEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGGroupEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGImageEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGLinearGradientEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGLineEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGMarkerEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGMaskEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGPathEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGPatternEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGRadialGradientEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGRectEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGSvgViewEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGSymbolEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGTextEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGTextPathEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGTSpanEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+class RNSVGUseEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  
+  
+};
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/Props.cpp b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/Props.cpp
new file mode 100644
index 0000000..26b1d3c
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/Props.cpp
@@ -0,0 +1,775 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/rnsvg/Props.h>
+#include <react/renderer/components/image/conversions.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook::react {
+
+RNSVGCircleProps::RNSVGCircleProps(
+    const PropsParserContext &context,
+    const RNSVGCircleProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    cx(convertRawProp(context, rawProps, "cx", sourceProps.cx, {})),
+    cy(convertRawProp(context, rawProps, "cy", sourceProps.cy, {})),
+    r(convertRawProp(context, rawProps, "r", sourceProps.r, {}))
+      {}
+RNSVGClipPathProps::RNSVGClipPathProps(
+    const PropsParserContext &context,
+    const RNSVGClipPathProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {}))
+      {}
+RNSVGDefsProps::RNSVGDefsProps(
+    const PropsParserContext &context,
+    const RNSVGDefsProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {}))
+      {}
+RNSVGEllipseProps::RNSVGEllipseProps(
+    const PropsParserContext &context,
+    const RNSVGEllipseProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    cx(convertRawProp(context, rawProps, "cx", sourceProps.cx, {})),
+    cy(convertRawProp(context, rawProps, "cy", sourceProps.cy, {})),
+    rx(convertRawProp(context, rawProps, "rx", sourceProps.rx, {})),
+    ry(convertRawProp(context, rawProps, "ry", sourceProps.ry, {}))
+      {}
+RNSVGForeignObjectProps::RNSVGForeignObjectProps(
+    const PropsParserContext &context,
+    const RNSVGForeignObjectProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {}))
+      {}
+RNSVGGroupProps::RNSVGGroupProps(
+    const PropsParserContext &context,
+    const RNSVGGroupProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {}))
+      {}
+RNSVGImageProps::RNSVGImageProps(
+    const PropsParserContext &context,
+    const RNSVGImageProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    src(convertRawProp(context, rawProps, "src", sourceProps.src, {})),
+    align(convertRawProp(context, rawProps, "align", sourceProps.align, {})),
+    meetOrSlice(convertRawProp(context, rawProps, "meetOrSlice", sourceProps.meetOrSlice, {0}))
+      {}
+RNSVGLinearGradientProps::RNSVGLinearGradientProps(
+    const PropsParserContext &context,
+    const RNSVGLinearGradientProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    x1(convertRawProp(context, rawProps, "x1", sourceProps.x1, {})),
+    y1(convertRawProp(context, rawProps, "y1", sourceProps.y1, {})),
+    x2(convertRawProp(context, rawProps, "x2", sourceProps.x2, {})),
+    y2(convertRawProp(context, rawProps, "y2", sourceProps.y2, {})),
+    gradient(convertRawProp(context, rawProps, "gradient", sourceProps.gradient, {})),
+    gradientUnits(convertRawProp(context, rawProps, "gradientUnits", sourceProps.gradientUnits, {0})),
+    gradientTransform(convertRawProp(context, rawProps, "gradientTransform", sourceProps.gradientTransform, {}))
+      {}
+RNSVGLineProps::RNSVGLineProps(
+    const PropsParserContext &context,
+    const RNSVGLineProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    x1(convertRawProp(context, rawProps, "x1", sourceProps.x1, {})),
+    y1(convertRawProp(context, rawProps, "y1", sourceProps.y1, {})),
+    x2(convertRawProp(context, rawProps, "x2", sourceProps.x2, {})),
+    y2(convertRawProp(context, rawProps, "y2", sourceProps.y2, {}))
+      {}
+RNSVGMarkerProps::RNSVGMarkerProps(
+    const PropsParserContext &context,
+    const RNSVGMarkerProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {})),
+    refX(convertRawProp(context, rawProps, "refX", sourceProps.refX, {})),
+    refY(convertRawProp(context, rawProps, "refY", sourceProps.refY, {})),
+    markerHeight(convertRawProp(context, rawProps, "markerHeight", sourceProps.markerHeight, {})),
+    markerWidth(convertRawProp(context, rawProps, "markerWidth", sourceProps.markerWidth, {})),
+    markerUnits(convertRawProp(context, rawProps, "markerUnits", sourceProps.markerUnits, {})),
+    orient(convertRawProp(context, rawProps, "orient", sourceProps.orient, {})),
+    minX(convertRawProp(context, rawProps, "minX", sourceProps.minX, {0.0})),
+    minY(convertRawProp(context, rawProps, "minY", sourceProps.minY, {0.0})),
+    vbWidth(convertRawProp(context, rawProps, "vbWidth", sourceProps.vbWidth, {0.0})),
+    vbHeight(convertRawProp(context, rawProps, "vbHeight", sourceProps.vbHeight, {0.0})),
+    align(convertRawProp(context, rawProps, "align", sourceProps.align, {})),
+    meetOrSlice(convertRawProp(context, rawProps, "meetOrSlice", sourceProps.meetOrSlice, {0}))
+      {}
+RNSVGMaskProps::RNSVGMaskProps(
+    const PropsParserContext &context,
+    const RNSVGMaskProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {})),
+    maskUnits(convertRawProp(context, rawProps, "maskUnits", sourceProps.maskUnits, {0})),
+    maskContentUnits(convertRawProp(context, rawProps, "maskContentUnits", sourceProps.maskContentUnits, {0})),
+    maskTransform(convertRawProp(context, rawProps, "maskTransform", sourceProps.maskTransform, {}))
+      {}
+RNSVGPathProps::RNSVGPathProps(
+    const PropsParserContext &context,
+    const RNSVGPathProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    d(convertRawProp(context, rawProps, "d", sourceProps.d, {}))
+      {}
+RNSVGPatternProps::RNSVGPatternProps(
+    const PropsParserContext &context,
+    const RNSVGPatternProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {})),
+    patternUnits(convertRawProp(context, rawProps, "patternUnits", sourceProps.patternUnits, {0})),
+    patternContentUnits(convertRawProp(context, rawProps, "patternContentUnits", sourceProps.patternContentUnits, {0})),
+    patternTransform(convertRawProp(context, rawProps, "patternTransform", sourceProps.patternTransform, {})),
+    minX(convertRawProp(context, rawProps, "minX", sourceProps.minX, {0.0})),
+    minY(convertRawProp(context, rawProps, "minY", sourceProps.minY, {0.0})),
+    vbWidth(convertRawProp(context, rawProps, "vbWidth", sourceProps.vbWidth, {0.0})),
+    vbHeight(convertRawProp(context, rawProps, "vbHeight", sourceProps.vbHeight, {0.0})),
+    align(convertRawProp(context, rawProps, "align", sourceProps.align, {})),
+    meetOrSlice(convertRawProp(context, rawProps, "meetOrSlice", sourceProps.meetOrSlice, {0}))
+      {}
+RNSVGRadialGradientProps::RNSVGRadialGradientProps(
+    const PropsParserContext &context,
+    const RNSVGRadialGradientProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fx(convertRawProp(context, rawProps, "fx", sourceProps.fx, {})),
+    fy(convertRawProp(context, rawProps, "fy", sourceProps.fy, {})),
+    cx(convertRawProp(context, rawProps, "cx", sourceProps.cx, {})),
+    cy(convertRawProp(context, rawProps, "cy", sourceProps.cy, {})),
+    rx(convertRawProp(context, rawProps, "rx", sourceProps.rx, {})),
+    ry(convertRawProp(context, rawProps, "ry", sourceProps.ry, {})),
+    gradient(convertRawProp(context, rawProps, "gradient", sourceProps.gradient, {})),
+    gradientUnits(convertRawProp(context, rawProps, "gradientUnits", sourceProps.gradientUnits, {0})),
+    gradientTransform(convertRawProp(context, rawProps, "gradientTransform", sourceProps.gradientTransform, {}))
+      {}
+RNSVGRectProps::RNSVGRectProps(
+    const PropsParserContext &context,
+    const RNSVGRectProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {})),
+    rx(convertRawProp(context, rawProps, "rx", sourceProps.rx, {})),
+    ry(convertRawProp(context, rawProps, "ry", sourceProps.ry, {}))
+      {}
+RNSVGSvgViewProps::RNSVGSvgViewProps(
+    const PropsParserContext &context,
+    const RNSVGSvgViewProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    bbWidth(convertRawProp(context, rawProps, "bbWidth", sourceProps.bbWidth, {})),
+    bbHeight(convertRawProp(context, rawProps, "bbHeight", sourceProps.bbHeight, {})),
+    minX(convertRawProp(context, rawProps, "minX", sourceProps.minX, {0.0})),
+    minY(convertRawProp(context, rawProps, "minY", sourceProps.minY, {0.0})),
+    vbWidth(convertRawProp(context, rawProps, "vbWidth", sourceProps.vbWidth, {0.0})),
+    vbHeight(convertRawProp(context, rawProps, "vbHeight", sourceProps.vbHeight, {0.0})),
+    align(convertRawProp(context, rawProps, "align", sourceProps.align, {})),
+    meetOrSlice(convertRawProp(context, rawProps, "meetOrSlice", sourceProps.meetOrSlice, {0})),
+    tintColor(convertRawProp(context, rawProps, "tintColor", sourceProps.tintColor, {})),
+    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {}))
+      {}
+RNSVGSymbolProps::RNSVGSymbolProps(
+    const PropsParserContext &context,
+    const RNSVGSymbolProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {})),
+    minX(convertRawProp(context, rawProps, "minX", sourceProps.minX, {0.0})),
+    minY(convertRawProp(context, rawProps, "minY", sourceProps.minY, {0.0})),
+    vbWidth(convertRawProp(context, rawProps, "vbWidth", sourceProps.vbWidth, {0.0})),
+    vbHeight(convertRawProp(context, rawProps, "vbHeight", sourceProps.vbHeight, {0.0})),
+    align(convertRawProp(context, rawProps, "align", sourceProps.align, {})),
+    meetOrSlice(convertRawProp(context, rawProps, "meetOrSlice", sourceProps.meetOrSlice, {0}))
+      {}
+RNSVGTextProps::RNSVGTextProps(
+    const PropsParserContext &context,
+    const RNSVGTextProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {})),
+    dx(convertRawProp(context, rawProps, "dx", sourceProps.dx, {})),
+    dy(convertRawProp(context, rawProps, "dy", sourceProps.dy, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    rotate(convertRawProp(context, rawProps, "rotate", sourceProps.rotate, {})),
+    inlineSize(convertRawProp(context, rawProps, "inlineSize", sourceProps.inlineSize, {})),
+    textLength(convertRawProp(context, rawProps, "textLength", sourceProps.textLength, {})),
+    baselineShift(convertRawProp(context, rawProps, "baselineShift", sourceProps.baselineShift, {})),
+    lengthAdjust(convertRawProp(context, rawProps, "lengthAdjust", sourceProps.lengthAdjust, {})),
+    alignmentBaseline(convertRawProp(context, rawProps, "alignmentBaseline", sourceProps.alignmentBaseline, {})),
+    verticalAlign(convertRawProp(context, rawProps, "verticalAlign", sourceProps.verticalAlign, {}))
+      {}
+RNSVGTextPathProps::RNSVGTextPathProps(
+    const PropsParserContext &context,
+    const RNSVGTextPathProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {})),
+    dx(convertRawProp(context, rawProps, "dx", sourceProps.dx, {})),
+    dy(convertRawProp(context, rawProps, "dy", sourceProps.dy, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    rotate(convertRawProp(context, rawProps, "rotate", sourceProps.rotate, {})),
+    inlineSize(convertRawProp(context, rawProps, "inlineSize", sourceProps.inlineSize, {})),
+    textLength(convertRawProp(context, rawProps, "textLength", sourceProps.textLength, {})),
+    baselineShift(convertRawProp(context, rawProps, "baselineShift", sourceProps.baselineShift, {})),
+    lengthAdjust(convertRawProp(context, rawProps, "lengthAdjust", sourceProps.lengthAdjust, {})),
+    alignmentBaseline(convertRawProp(context, rawProps, "alignmentBaseline", sourceProps.alignmentBaseline, {})),
+    verticalAlign(convertRawProp(context, rawProps, "verticalAlign", sourceProps.verticalAlign, {})),
+    href(convertRawProp(context, rawProps, "href", sourceProps.href, {})),
+    side(convertRawProp(context, rawProps, "side", sourceProps.side, {})),
+    method(convertRawProp(context, rawProps, "method", sourceProps.method, {})),
+    midLine(convertRawProp(context, rawProps, "midLine", sourceProps.midLine, {})),
+    spacing(convertRawProp(context, rawProps, "spacing", sourceProps.spacing, {})),
+    startOffset(convertRawProp(context, rawProps, "startOffset", sourceProps.startOffset, {}))
+      {}
+RNSVGTSpanProps::RNSVGTSpanProps(
+    const PropsParserContext &context,
+    const RNSVGTSpanProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {})),
+    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
+    font(convertRawProp(context, rawProps, "font", sourceProps.font, {})),
+    dx(convertRawProp(context, rawProps, "dx", sourceProps.dx, {})),
+    dy(convertRawProp(context, rawProps, "dy", sourceProps.dy, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    rotate(convertRawProp(context, rawProps, "rotate", sourceProps.rotate, {})),
+    inlineSize(convertRawProp(context, rawProps, "inlineSize", sourceProps.inlineSize, {})),
+    textLength(convertRawProp(context, rawProps, "textLength", sourceProps.textLength, {})),
+    baselineShift(convertRawProp(context, rawProps, "baselineShift", sourceProps.baselineShift, {})),
+    lengthAdjust(convertRawProp(context, rawProps, "lengthAdjust", sourceProps.lengthAdjust, {})),
+    alignmentBaseline(convertRawProp(context, rawProps, "alignmentBaseline", sourceProps.alignmentBaseline, {})),
+    verticalAlign(convertRawProp(context, rawProps, "verticalAlign", sourceProps.verticalAlign, {})),
+    content(convertRawProp(context, rawProps, "content", sourceProps.content, {}))
+      {}
+RNSVGUseProps::RNSVGUseProps(
+    const PropsParserContext &context,
+    const RNSVGUseProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
+    opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})),
+    matrix(convertRawProp(context, rawProps, "matrix", sourceProps.matrix, {})),
+    mask(convertRawProp(context, rawProps, "mask", sourceProps.mask, {})),
+    markerStart(convertRawProp(context, rawProps, "markerStart", sourceProps.markerStart, {})),
+    markerMid(convertRawProp(context, rawProps, "markerMid", sourceProps.markerMid, {})),
+    markerEnd(convertRawProp(context, rawProps, "markerEnd", sourceProps.markerEnd, {})),
+    clipPath(convertRawProp(context, rawProps, "clipPath", sourceProps.clipPath, {})),
+    clipRule(convertRawProp(context, rawProps, "clipRule", sourceProps.clipRule, {0})),
+    responsible(convertRawProp(context, rawProps, "responsible", sourceProps.responsible, {false})),
+    display(convertRawProp(context, rawProps, "display", sourceProps.display, {})),
+    pointerEvents(convertRawProp(context, rawProps, "pointerEvents", sourceProps.pointerEvents, {})),
+    fill(convertRawProp(context, rawProps, "fill", sourceProps.fill, {})),
+    fillOpacity(convertRawProp(context, rawProps, "fillOpacity", sourceProps.fillOpacity, {1.0})),
+    fillRule(convertRawProp(context, rawProps, "fillRule", sourceProps.fillRule, {1})),
+    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
+    strokeOpacity(convertRawProp(context, rawProps, "strokeOpacity", sourceProps.strokeOpacity, {1.0})),
+    strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {"1"})),
+    strokeLinecap(convertRawProp(context, rawProps, "strokeLinecap", sourceProps.strokeLinecap, {0})),
+    strokeLinejoin(convertRawProp(context, rawProps, "strokeLinejoin", sourceProps.strokeLinejoin, {0})),
+    strokeDasharray(convertRawProp(context, rawProps, "strokeDasharray", sourceProps.strokeDasharray, {})),
+    strokeDashoffset(convertRawProp(context, rawProps, "strokeDashoffset", sourceProps.strokeDashoffset, {0.0})),
+    strokeMiterlimit(convertRawProp(context, rawProps, "strokeMiterlimit", sourceProps.strokeMiterlimit, {0.0})),
+    vectorEffect(convertRawProp(context, rawProps, "vectorEffect", sourceProps.vectorEffect, {0})),
+    propList(convertRawProp(context, rawProps, "propList", sourceProps.propList, {})),
+    href(convertRawProp(context, rawProps, "href", sourceProps.href, {})),
+    x(convertRawProp(context, rawProps, "x", sourceProps.x, {})),
+    y(convertRawProp(context, rawProps, "y", sourceProps.y, {})),
+    height(convertRawProp(context, rawProps, "height", sourceProps.height, {})),
+    width(convertRawProp(context, rawProps, "width", sourceProps.width, {}))
+      {}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/Props.h b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/Props.h
new file mode 100644
index 0000000..3346329
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/Props.h
@@ -0,0 +1,2561 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+#include <react/renderer/graphics/Color.h>
+#include <react/renderer/imagemanager/primitives.h>
+#include <vector>
+
+namespace facebook::react {
+
+struct RNSVGCircleFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGCircleFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGCircleFillStruct &value) {
+  return "[Object RNSVGCircleFillStruct]";
+}
+
+struct RNSVGCircleStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGCircleStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGCircleStrokeStruct &value) {
+  return "[Object RNSVGCircleStrokeStruct]";
+}
+class RNSVGCircleProps final : public ViewProps {
+ public:
+  RNSVGCircleProps() = default;
+  RNSVGCircleProps(const PropsParserContext& context, const RNSVGCircleProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGCircleFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGCircleStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string cx{};
+  std::string cy{};
+  std::string r{};
+};
+
+struct RNSVGClipPathFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGClipPathFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGClipPathFillStruct &value) {
+  return "[Object RNSVGClipPathFillStruct]";
+}
+
+struct RNSVGClipPathStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGClipPathStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGClipPathStrokeStruct &value) {
+  return "[Object RNSVGClipPathStrokeStruct]";
+}
+
+struct RNSVGClipPathFontStruct {
+  std::string fontStyle{};
+  std::string fontVariant{};
+  std::string fontWeight{};
+  std::string fontStretch{};
+  std::string fontSize{};
+  std::string fontFamily{};
+  std::string textAnchor{};
+  std::string textDecoration{};
+  std::string letterSpacing{};
+  std::string wordSpacing{};
+  std::string kerning{};
+  std::string fontFeatureSettings{};
+  std::string fontVariantLigatures{};
+  std::string fontVariationSettings{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGClipPathFontStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_fontStyle = map.find("fontStyle");
+  if (tmp_fontStyle != map.end()) {
+    fromRawValue(context, tmp_fontStyle->second, result.fontStyle);
+  }
+  auto tmp_fontVariant = map.find("fontVariant");
+  if (tmp_fontVariant != map.end()) {
+    fromRawValue(context, tmp_fontVariant->second, result.fontVariant);
+  }
+  auto tmp_fontWeight = map.find("fontWeight");
+  if (tmp_fontWeight != map.end()) {
+    fromRawValue(context, tmp_fontWeight->second, result.fontWeight);
+  }
+  auto tmp_fontStretch = map.find("fontStretch");
+  if (tmp_fontStretch != map.end()) {
+    fromRawValue(context, tmp_fontStretch->second, result.fontStretch);
+  }
+  auto tmp_fontSize = map.find("fontSize");
+  if (tmp_fontSize != map.end()) {
+    fromRawValue(context, tmp_fontSize->second, result.fontSize);
+  }
+  auto tmp_fontFamily = map.find("fontFamily");
+  if (tmp_fontFamily != map.end()) {
+    fromRawValue(context, tmp_fontFamily->second, result.fontFamily);
+  }
+  auto tmp_textAnchor = map.find("textAnchor");
+  if (tmp_textAnchor != map.end()) {
+    fromRawValue(context, tmp_textAnchor->second, result.textAnchor);
+  }
+  auto tmp_textDecoration = map.find("textDecoration");
+  if (tmp_textDecoration != map.end()) {
+    fromRawValue(context, tmp_textDecoration->second, result.textDecoration);
+  }
+  auto tmp_letterSpacing = map.find("letterSpacing");
+  if (tmp_letterSpacing != map.end()) {
+    fromRawValue(context, tmp_letterSpacing->second, result.letterSpacing);
+  }
+  auto tmp_wordSpacing = map.find("wordSpacing");
+  if (tmp_wordSpacing != map.end()) {
+    fromRawValue(context, tmp_wordSpacing->second, result.wordSpacing);
+  }
+  auto tmp_kerning = map.find("kerning");
+  if (tmp_kerning != map.end()) {
+    fromRawValue(context, tmp_kerning->second, result.kerning);
+  }
+  auto tmp_fontFeatureSettings = map.find("fontFeatureSettings");
+  if (tmp_fontFeatureSettings != map.end()) {
+    fromRawValue(context, tmp_fontFeatureSettings->second, result.fontFeatureSettings);
+  }
+  auto tmp_fontVariantLigatures = map.find("fontVariantLigatures");
+  if (tmp_fontVariantLigatures != map.end()) {
+    fromRawValue(context, tmp_fontVariantLigatures->second, result.fontVariantLigatures);
+  }
+  auto tmp_fontVariationSettings = map.find("fontVariationSettings");
+  if (tmp_fontVariationSettings != map.end()) {
+    fromRawValue(context, tmp_fontVariationSettings->second, result.fontVariationSettings);
+  }
+}
+
+static inline std::string toString(const RNSVGClipPathFontStruct &value) {
+  return "[Object RNSVGClipPathFontStruct]";
+}
+class RNSVGClipPathProps final : public ViewProps {
+ public:
+  RNSVGClipPathProps() = default;
+  RNSVGClipPathProps(const PropsParserContext& context, const RNSVGClipPathProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGClipPathFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGClipPathStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string fontSize{};
+  std::string fontWeight{};
+  RNSVGClipPathFontStruct font{};
+};
+
+class RNSVGDefsProps final : public ViewProps {
+ public:
+  RNSVGDefsProps() = default;
+  RNSVGDefsProps(const PropsParserContext& context, const RNSVGDefsProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+};
+
+struct RNSVGEllipseFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGEllipseFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGEllipseFillStruct &value) {
+  return "[Object RNSVGEllipseFillStruct]";
+}
+
+struct RNSVGEllipseStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGEllipseStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGEllipseStrokeStruct &value) {
+  return "[Object RNSVGEllipseStrokeStruct]";
+}
+class RNSVGEllipseProps final : public ViewProps {
+ public:
+  RNSVGEllipseProps() = default;
+  RNSVGEllipseProps(const PropsParserContext& context, const RNSVGEllipseProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGEllipseFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGEllipseStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string cx{};
+  std::string cy{};
+  std::string rx{};
+  std::string ry{};
+};
+
+struct RNSVGForeignObjectFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGForeignObjectFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGForeignObjectFillStruct &value) {
+  return "[Object RNSVGForeignObjectFillStruct]";
+}
+
+struct RNSVGForeignObjectStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGForeignObjectStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGForeignObjectStrokeStruct &value) {
+  return "[Object RNSVGForeignObjectStrokeStruct]";
+}
+
+struct RNSVGForeignObjectFontStruct {
+  std::string fontStyle{};
+  std::string fontVariant{};
+  std::string fontWeight{};
+  std::string fontStretch{};
+  std::string fontSize{};
+  std::string fontFamily{};
+  std::string textAnchor{};
+  std::string textDecoration{};
+  std::string letterSpacing{};
+  std::string wordSpacing{};
+  std::string kerning{};
+  std::string fontFeatureSettings{};
+  std::string fontVariantLigatures{};
+  std::string fontVariationSettings{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGForeignObjectFontStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_fontStyle = map.find("fontStyle");
+  if (tmp_fontStyle != map.end()) {
+    fromRawValue(context, tmp_fontStyle->second, result.fontStyle);
+  }
+  auto tmp_fontVariant = map.find("fontVariant");
+  if (tmp_fontVariant != map.end()) {
+    fromRawValue(context, tmp_fontVariant->second, result.fontVariant);
+  }
+  auto tmp_fontWeight = map.find("fontWeight");
+  if (tmp_fontWeight != map.end()) {
+    fromRawValue(context, tmp_fontWeight->second, result.fontWeight);
+  }
+  auto tmp_fontStretch = map.find("fontStretch");
+  if (tmp_fontStretch != map.end()) {
+    fromRawValue(context, tmp_fontStretch->second, result.fontStretch);
+  }
+  auto tmp_fontSize = map.find("fontSize");
+  if (tmp_fontSize != map.end()) {
+    fromRawValue(context, tmp_fontSize->second, result.fontSize);
+  }
+  auto tmp_fontFamily = map.find("fontFamily");
+  if (tmp_fontFamily != map.end()) {
+    fromRawValue(context, tmp_fontFamily->second, result.fontFamily);
+  }
+  auto tmp_textAnchor = map.find("textAnchor");
+  if (tmp_textAnchor != map.end()) {
+    fromRawValue(context, tmp_textAnchor->second, result.textAnchor);
+  }
+  auto tmp_textDecoration = map.find("textDecoration");
+  if (tmp_textDecoration != map.end()) {
+    fromRawValue(context, tmp_textDecoration->second, result.textDecoration);
+  }
+  auto tmp_letterSpacing = map.find("letterSpacing");
+  if (tmp_letterSpacing != map.end()) {
+    fromRawValue(context, tmp_letterSpacing->second, result.letterSpacing);
+  }
+  auto tmp_wordSpacing = map.find("wordSpacing");
+  if (tmp_wordSpacing != map.end()) {
+    fromRawValue(context, tmp_wordSpacing->second, result.wordSpacing);
+  }
+  auto tmp_kerning = map.find("kerning");
+  if (tmp_kerning != map.end()) {
+    fromRawValue(context, tmp_kerning->second, result.kerning);
+  }
+  auto tmp_fontFeatureSettings = map.find("fontFeatureSettings");
+  if (tmp_fontFeatureSettings != map.end()) {
+    fromRawValue(context, tmp_fontFeatureSettings->second, result.fontFeatureSettings);
+  }
+  auto tmp_fontVariantLigatures = map.find("fontVariantLigatures");
+  if (tmp_fontVariantLigatures != map.end()) {
+    fromRawValue(context, tmp_fontVariantLigatures->second, result.fontVariantLigatures);
+  }
+  auto tmp_fontVariationSettings = map.find("fontVariationSettings");
+  if (tmp_fontVariationSettings != map.end()) {
+    fromRawValue(context, tmp_fontVariationSettings->second, result.fontVariationSettings);
+  }
+}
+
+static inline std::string toString(const RNSVGForeignObjectFontStruct &value) {
+  return "[Object RNSVGForeignObjectFontStruct]";
+}
+class RNSVGForeignObjectProps final : public ViewProps {
+ public:
+  RNSVGForeignObjectProps() = default;
+  RNSVGForeignObjectProps(const PropsParserContext& context, const RNSVGForeignObjectProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGForeignObjectFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGForeignObjectStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string fontSize{};
+  std::string fontWeight{};
+  RNSVGForeignObjectFontStruct font{};
+  std::string x{};
+  std::string y{};
+  std::string height{};
+  std::string width{};
+};
+
+struct RNSVGGroupFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGGroupFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGGroupFillStruct &value) {
+  return "[Object RNSVGGroupFillStruct]";
+}
+
+struct RNSVGGroupStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGGroupStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGGroupStrokeStruct &value) {
+  return "[Object RNSVGGroupStrokeStruct]";
+}
+
+struct RNSVGGroupFontStruct {
+  std::string fontStyle{};
+  std::string fontVariant{};
+  std::string fontWeight{};
+  std::string fontStretch{};
+  std::string fontSize{};
+  std::string fontFamily{};
+  std::string textAnchor{};
+  std::string textDecoration{};
+  std::string letterSpacing{};
+  std::string wordSpacing{};
+  std::string kerning{};
+  std::string fontFeatureSettings{};
+  std::string fontVariantLigatures{};
+  std::string fontVariationSettings{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGGroupFontStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_fontStyle = map.find("fontStyle");
+  if (tmp_fontStyle != map.end()) {
+    fromRawValue(context, tmp_fontStyle->second, result.fontStyle);
+  }
+  auto tmp_fontVariant = map.find("fontVariant");
+  if (tmp_fontVariant != map.end()) {
+    fromRawValue(context, tmp_fontVariant->second, result.fontVariant);
+  }
+  auto tmp_fontWeight = map.find("fontWeight");
+  if (tmp_fontWeight != map.end()) {
+    fromRawValue(context, tmp_fontWeight->second, result.fontWeight);
+  }
+  auto tmp_fontStretch = map.find("fontStretch");
+  if (tmp_fontStretch != map.end()) {
+    fromRawValue(context, tmp_fontStretch->second, result.fontStretch);
+  }
+  auto tmp_fontSize = map.find("fontSize");
+  if (tmp_fontSize != map.end()) {
+    fromRawValue(context, tmp_fontSize->second, result.fontSize);
+  }
+  auto tmp_fontFamily = map.find("fontFamily");
+  if (tmp_fontFamily != map.end()) {
+    fromRawValue(context, tmp_fontFamily->second, result.fontFamily);
+  }
+  auto tmp_textAnchor = map.find("textAnchor");
+  if (tmp_textAnchor != map.end()) {
+    fromRawValue(context, tmp_textAnchor->second, result.textAnchor);
+  }
+  auto tmp_textDecoration = map.find("textDecoration");
+  if (tmp_textDecoration != map.end()) {
+    fromRawValue(context, tmp_textDecoration->second, result.textDecoration);
+  }
+  auto tmp_letterSpacing = map.find("letterSpacing");
+  if (tmp_letterSpacing != map.end()) {
+    fromRawValue(context, tmp_letterSpacing->second, result.letterSpacing);
+  }
+  auto tmp_wordSpacing = map.find("wordSpacing");
+  if (tmp_wordSpacing != map.end()) {
+    fromRawValue(context, tmp_wordSpacing->second, result.wordSpacing);
+  }
+  auto tmp_kerning = map.find("kerning");
+  if (tmp_kerning != map.end()) {
+    fromRawValue(context, tmp_kerning->second, result.kerning);
+  }
+  auto tmp_fontFeatureSettings = map.find("fontFeatureSettings");
+  if (tmp_fontFeatureSettings != map.end()) {
+    fromRawValue(context, tmp_fontFeatureSettings->second, result.fontFeatureSettings);
+  }
+  auto tmp_fontVariantLigatures = map.find("fontVariantLigatures");
+  if (tmp_fontVariantLigatures != map.end()) {
+    fromRawValue(context, tmp_fontVariantLigatures->second, result.fontVariantLigatures);
+  }
+  auto tmp_fontVariationSettings = map.find("fontVariationSettings");
+  if (tmp_fontVariationSettings != map.end()) {
+    fromRawValue(context, tmp_fontVariationSettings->second, result.fontVariationSettings);
+  }
+}
+
+static inline std::string toString(const RNSVGGroupFontStruct &value) {
+  return "[Object RNSVGGroupFontStruct]";
+}
+class RNSVGGroupProps final : public ViewProps {
+ public:
+  RNSVGGroupProps() = default;
+  RNSVGGroupProps(const PropsParserContext& context, const RNSVGGroupProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGGroupFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGGroupStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string fontSize{};
+  std::string fontWeight{};
+  RNSVGGroupFontStruct font{};
+};
+
+struct RNSVGImageFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGImageFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGImageFillStruct &value) {
+  return "[Object RNSVGImageFillStruct]";
+}
+
+struct RNSVGImageStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGImageStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGImageStrokeStruct &value) {
+  return "[Object RNSVGImageStrokeStruct]";
+}
+class RNSVGImageProps final : public ViewProps {
+ public:
+  RNSVGImageProps() = default;
+  RNSVGImageProps(const PropsParserContext& context, const RNSVGImageProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGImageFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGImageStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string x{};
+  std::string y{};
+  std::string width{};
+  std::string height{};
+  ImageSource src{};
+  std::string align{};
+  int meetOrSlice{0};
+};
+
+class RNSVGLinearGradientProps final : public ViewProps {
+ public:
+  RNSVGLinearGradientProps() = default;
+  RNSVGLinearGradientProps(const PropsParserContext& context, const RNSVGLinearGradientProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  std::string x1{};
+  std::string y1{};
+  std::string x2{};
+  std::string y2{};
+  std::vector<Float> gradient{};
+  int gradientUnits{0};
+  std::vector<Float> gradientTransform{};
+};
+
+struct RNSVGLineFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGLineFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGLineFillStruct &value) {
+  return "[Object RNSVGLineFillStruct]";
+}
+
+struct RNSVGLineStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGLineStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGLineStrokeStruct &value) {
+  return "[Object RNSVGLineStrokeStruct]";
+}
+class RNSVGLineProps final : public ViewProps {
+ public:
+  RNSVGLineProps() = default;
+  RNSVGLineProps(const PropsParserContext& context, const RNSVGLineProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGLineFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGLineStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string x1{};
+  std::string y1{};
+  std::string x2{};
+  std::string y2{};
+};
+
+struct RNSVGMarkerFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGMarkerFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGMarkerFillStruct &value) {
+  return "[Object RNSVGMarkerFillStruct]";
+}
+
+struct RNSVGMarkerStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGMarkerStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGMarkerStrokeStruct &value) {
+  return "[Object RNSVGMarkerStrokeStruct]";
+}
+
+struct RNSVGMarkerFontStruct {
+  std::string fontStyle{};
+  std::string fontVariant{};
+  std::string fontWeight{};
+  std::string fontStretch{};
+  std::string fontSize{};
+  std::string fontFamily{};
+  std::string textAnchor{};
+  std::string textDecoration{};
+  std::string letterSpacing{};
+  std::string wordSpacing{};
+  std::string kerning{};
+  std::string fontFeatureSettings{};
+  std::string fontVariantLigatures{};
+  std::string fontVariationSettings{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGMarkerFontStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_fontStyle = map.find("fontStyle");
+  if (tmp_fontStyle != map.end()) {
+    fromRawValue(context, tmp_fontStyle->second, result.fontStyle);
+  }
+  auto tmp_fontVariant = map.find("fontVariant");
+  if (tmp_fontVariant != map.end()) {
+    fromRawValue(context, tmp_fontVariant->second, result.fontVariant);
+  }
+  auto tmp_fontWeight = map.find("fontWeight");
+  if (tmp_fontWeight != map.end()) {
+    fromRawValue(context, tmp_fontWeight->second, result.fontWeight);
+  }
+  auto tmp_fontStretch = map.find("fontStretch");
+  if (tmp_fontStretch != map.end()) {
+    fromRawValue(context, tmp_fontStretch->second, result.fontStretch);
+  }
+  auto tmp_fontSize = map.find("fontSize");
+  if (tmp_fontSize != map.end()) {
+    fromRawValue(context, tmp_fontSize->second, result.fontSize);
+  }
+  auto tmp_fontFamily = map.find("fontFamily");
+  if (tmp_fontFamily != map.end()) {
+    fromRawValue(context, tmp_fontFamily->second, result.fontFamily);
+  }
+  auto tmp_textAnchor = map.find("textAnchor");
+  if (tmp_textAnchor != map.end()) {
+    fromRawValue(context, tmp_textAnchor->second, result.textAnchor);
+  }
+  auto tmp_textDecoration = map.find("textDecoration");
+  if (tmp_textDecoration != map.end()) {
+    fromRawValue(context, tmp_textDecoration->second, result.textDecoration);
+  }
+  auto tmp_letterSpacing = map.find("letterSpacing");
+  if (tmp_letterSpacing != map.end()) {
+    fromRawValue(context, tmp_letterSpacing->second, result.letterSpacing);
+  }
+  auto tmp_wordSpacing = map.find("wordSpacing");
+  if (tmp_wordSpacing != map.end()) {
+    fromRawValue(context, tmp_wordSpacing->second, result.wordSpacing);
+  }
+  auto tmp_kerning = map.find("kerning");
+  if (tmp_kerning != map.end()) {
+    fromRawValue(context, tmp_kerning->second, result.kerning);
+  }
+  auto tmp_fontFeatureSettings = map.find("fontFeatureSettings");
+  if (tmp_fontFeatureSettings != map.end()) {
+    fromRawValue(context, tmp_fontFeatureSettings->second, result.fontFeatureSettings);
+  }
+  auto tmp_fontVariantLigatures = map.find("fontVariantLigatures");
+  if (tmp_fontVariantLigatures != map.end()) {
+    fromRawValue(context, tmp_fontVariantLigatures->second, result.fontVariantLigatures);
+  }
+  auto tmp_fontVariationSettings = map.find("fontVariationSettings");
+  if (tmp_fontVariationSettings != map.end()) {
+    fromRawValue(context, tmp_fontVariationSettings->second, result.fontVariationSettings);
+  }
+}
+
+static inline std::string toString(const RNSVGMarkerFontStruct &value) {
+  return "[Object RNSVGMarkerFontStruct]";
+}
+class RNSVGMarkerProps final : public ViewProps {
+ public:
+  RNSVGMarkerProps() = default;
+  RNSVGMarkerProps(const PropsParserContext& context, const RNSVGMarkerProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGMarkerFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGMarkerStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string fontSize{};
+  std::string fontWeight{};
+  RNSVGMarkerFontStruct font{};
+  std::string refX{};
+  std::string refY{};
+  std::string markerHeight{};
+  std::string markerWidth{};
+  std::string markerUnits{};
+  std::string orient{};
+  Float minX{0.0};
+  Float minY{0.0};
+  Float vbWidth{0.0};
+  Float vbHeight{0.0};
+  std::string align{};
+  int meetOrSlice{0};
+};
+
+struct RNSVGMaskFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGMaskFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGMaskFillStruct &value) {
+  return "[Object RNSVGMaskFillStruct]";
+}
+
+struct RNSVGMaskStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGMaskStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGMaskStrokeStruct &value) {
+  return "[Object RNSVGMaskStrokeStruct]";
+}
+
+struct RNSVGMaskFontStruct {
+  std::string fontStyle{};
+  std::string fontVariant{};
+  std::string fontWeight{};
+  std::string fontStretch{};
+  std::string fontSize{};
+  std::string fontFamily{};
+  std::string textAnchor{};
+  std::string textDecoration{};
+  std::string letterSpacing{};
+  std::string wordSpacing{};
+  std::string kerning{};
+  std::string fontFeatureSettings{};
+  std::string fontVariantLigatures{};
+  std::string fontVariationSettings{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGMaskFontStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_fontStyle = map.find("fontStyle");
+  if (tmp_fontStyle != map.end()) {
+    fromRawValue(context, tmp_fontStyle->second, result.fontStyle);
+  }
+  auto tmp_fontVariant = map.find("fontVariant");
+  if (tmp_fontVariant != map.end()) {
+    fromRawValue(context, tmp_fontVariant->second, result.fontVariant);
+  }
+  auto tmp_fontWeight = map.find("fontWeight");
+  if (tmp_fontWeight != map.end()) {
+    fromRawValue(context, tmp_fontWeight->second, result.fontWeight);
+  }
+  auto tmp_fontStretch = map.find("fontStretch");
+  if (tmp_fontStretch != map.end()) {
+    fromRawValue(context, tmp_fontStretch->second, result.fontStretch);
+  }
+  auto tmp_fontSize = map.find("fontSize");
+  if (tmp_fontSize != map.end()) {
+    fromRawValue(context, tmp_fontSize->second, result.fontSize);
+  }
+  auto tmp_fontFamily = map.find("fontFamily");
+  if (tmp_fontFamily != map.end()) {
+    fromRawValue(context, tmp_fontFamily->second, result.fontFamily);
+  }
+  auto tmp_textAnchor = map.find("textAnchor");
+  if (tmp_textAnchor != map.end()) {
+    fromRawValue(context, tmp_textAnchor->second, result.textAnchor);
+  }
+  auto tmp_textDecoration = map.find("textDecoration");
+  if (tmp_textDecoration != map.end()) {
+    fromRawValue(context, tmp_textDecoration->second, result.textDecoration);
+  }
+  auto tmp_letterSpacing = map.find("letterSpacing");
+  if (tmp_letterSpacing != map.end()) {
+    fromRawValue(context, tmp_letterSpacing->second, result.letterSpacing);
+  }
+  auto tmp_wordSpacing = map.find("wordSpacing");
+  if (tmp_wordSpacing != map.end()) {
+    fromRawValue(context, tmp_wordSpacing->second, result.wordSpacing);
+  }
+  auto tmp_kerning = map.find("kerning");
+  if (tmp_kerning != map.end()) {
+    fromRawValue(context, tmp_kerning->second, result.kerning);
+  }
+  auto tmp_fontFeatureSettings = map.find("fontFeatureSettings");
+  if (tmp_fontFeatureSettings != map.end()) {
+    fromRawValue(context, tmp_fontFeatureSettings->second, result.fontFeatureSettings);
+  }
+  auto tmp_fontVariantLigatures = map.find("fontVariantLigatures");
+  if (tmp_fontVariantLigatures != map.end()) {
+    fromRawValue(context, tmp_fontVariantLigatures->second, result.fontVariantLigatures);
+  }
+  auto tmp_fontVariationSettings = map.find("fontVariationSettings");
+  if (tmp_fontVariationSettings != map.end()) {
+    fromRawValue(context, tmp_fontVariationSettings->second, result.fontVariationSettings);
+  }
+}
+
+static inline std::string toString(const RNSVGMaskFontStruct &value) {
+  return "[Object RNSVGMaskFontStruct]";
+}
+class RNSVGMaskProps final : public ViewProps {
+ public:
+  RNSVGMaskProps() = default;
+  RNSVGMaskProps(const PropsParserContext& context, const RNSVGMaskProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGMaskFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGMaskStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string fontSize{};
+  std::string fontWeight{};
+  RNSVGMaskFontStruct font{};
+  std::string x{};
+  std::string y{};
+  std::string height{};
+  std::string width{};
+  int maskUnits{0};
+  int maskContentUnits{0};
+  std::vector<Float> maskTransform{};
+};
+
+struct RNSVGPathFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGPathFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGPathFillStruct &value) {
+  return "[Object RNSVGPathFillStruct]";
+}
+
+struct RNSVGPathStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGPathStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGPathStrokeStruct &value) {
+  return "[Object RNSVGPathStrokeStruct]";
+}
+class RNSVGPathProps final : public ViewProps {
+ public:
+  RNSVGPathProps() = default;
+  RNSVGPathProps(const PropsParserContext& context, const RNSVGPathProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGPathFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGPathStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string d{};
+};
+
+struct RNSVGPatternFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGPatternFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGPatternFillStruct &value) {
+  return "[Object RNSVGPatternFillStruct]";
+}
+
+struct RNSVGPatternStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGPatternStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGPatternStrokeStruct &value) {
+  return "[Object RNSVGPatternStrokeStruct]";
+}
+
+struct RNSVGPatternFontStruct {
+  std::string fontStyle{};
+  std::string fontVariant{};
+  std::string fontWeight{};
+  std::string fontStretch{};
+  std::string fontSize{};
+  std::string fontFamily{};
+  std::string textAnchor{};
+  std::string textDecoration{};
+  std::string letterSpacing{};
+  std::string wordSpacing{};
+  std::string kerning{};
+  std::string fontFeatureSettings{};
+  std::string fontVariantLigatures{};
+  std::string fontVariationSettings{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGPatternFontStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_fontStyle = map.find("fontStyle");
+  if (tmp_fontStyle != map.end()) {
+    fromRawValue(context, tmp_fontStyle->second, result.fontStyle);
+  }
+  auto tmp_fontVariant = map.find("fontVariant");
+  if (tmp_fontVariant != map.end()) {
+    fromRawValue(context, tmp_fontVariant->second, result.fontVariant);
+  }
+  auto tmp_fontWeight = map.find("fontWeight");
+  if (tmp_fontWeight != map.end()) {
+    fromRawValue(context, tmp_fontWeight->second, result.fontWeight);
+  }
+  auto tmp_fontStretch = map.find("fontStretch");
+  if (tmp_fontStretch != map.end()) {
+    fromRawValue(context, tmp_fontStretch->second, result.fontStretch);
+  }
+  auto tmp_fontSize = map.find("fontSize");
+  if (tmp_fontSize != map.end()) {
+    fromRawValue(context, tmp_fontSize->second, result.fontSize);
+  }
+  auto tmp_fontFamily = map.find("fontFamily");
+  if (tmp_fontFamily != map.end()) {
+    fromRawValue(context, tmp_fontFamily->second, result.fontFamily);
+  }
+  auto tmp_textAnchor = map.find("textAnchor");
+  if (tmp_textAnchor != map.end()) {
+    fromRawValue(context, tmp_textAnchor->second, result.textAnchor);
+  }
+  auto tmp_textDecoration = map.find("textDecoration");
+  if (tmp_textDecoration != map.end()) {
+    fromRawValue(context, tmp_textDecoration->second, result.textDecoration);
+  }
+  auto tmp_letterSpacing = map.find("letterSpacing");
+  if (tmp_letterSpacing != map.end()) {
+    fromRawValue(context, tmp_letterSpacing->second, result.letterSpacing);
+  }
+  auto tmp_wordSpacing = map.find("wordSpacing");
+  if (tmp_wordSpacing != map.end()) {
+    fromRawValue(context, tmp_wordSpacing->second, result.wordSpacing);
+  }
+  auto tmp_kerning = map.find("kerning");
+  if (tmp_kerning != map.end()) {
+    fromRawValue(context, tmp_kerning->second, result.kerning);
+  }
+  auto tmp_fontFeatureSettings = map.find("fontFeatureSettings");
+  if (tmp_fontFeatureSettings != map.end()) {
+    fromRawValue(context, tmp_fontFeatureSettings->second, result.fontFeatureSettings);
+  }
+  auto tmp_fontVariantLigatures = map.find("fontVariantLigatures");
+  if (tmp_fontVariantLigatures != map.end()) {
+    fromRawValue(context, tmp_fontVariantLigatures->second, result.fontVariantLigatures);
+  }
+  auto tmp_fontVariationSettings = map.find("fontVariationSettings");
+  if (tmp_fontVariationSettings != map.end()) {
+    fromRawValue(context, tmp_fontVariationSettings->second, result.fontVariationSettings);
+  }
+}
+
+static inline std::string toString(const RNSVGPatternFontStruct &value) {
+  return "[Object RNSVGPatternFontStruct]";
+}
+class RNSVGPatternProps final : public ViewProps {
+ public:
+  RNSVGPatternProps() = default;
+  RNSVGPatternProps(const PropsParserContext& context, const RNSVGPatternProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGPatternFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGPatternStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string fontSize{};
+  std::string fontWeight{};
+  RNSVGPatternFontStruct font{};
+  std::string x{};
+  std::string y{};
+  std::string height{};
+  std::string width{};
+  int patternUnits{0};
+  int patternContentUnits{0};
+  std::vector<Float> patternTransform{};
+  Float minX{0.0};
+  Float minY{0.0};
+  Float vbWidth{0.0};
+  Float vbHeight{0.0};
+  std::string align{};
+  int meetOrSlice{0};
+};
+
+class RNSVGRadialGradientProps final : public ViewProps {
+ public:
+  RNSVGRadialGradientProps() = default;
+  RNSVGRadialGradientProps(const PropsParserContext& context, const RNSVGRadialGradientProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  std::string fx{};
+  std::string fy{};
+  std::string cx{};
+  std::string cy{};
+  std::string rx{};
+  std::string ry{};
+  std::vector<Float> gradient{};
+  int gradientUnits{0};
+  std::vector<Float> gradientTransform{};
+};
+
+struct RNSVGRectFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGRectFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGRectFillStruct &value) {
+  return "[Object RNSVGRectFillStruct]";
+}
+
+struct RNSVGRectStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGRectStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGRectStrokeStruct &value) {
+  return "[Object RNSVGRectStrokeStruct]";
+}
+class RNSVGRectProps final : public ViewProps {
+ public:
+  RNSVGRectProps() = default;
+  RNSVGRectProps(const PropsParserContext& context, const RNSVGRectProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGRectFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGRectStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string x{};
+  std::string y{};
+  std::string height{};
+  std::string width{};
+  std::string rx{};
+  std::string ry{};
+};
+
+class RNSVGSvgViewProps final : public ViewProps {
+ public:
+  RNSVGSvgViewProps() = default;
+  RNSVGSvgViewProps(const PropsParserContext& context, const RNSVGSvgViewProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string bbWidth{};
+  std::string bbHeight{};
+  Float minX{0.0};
+  Float minY{0.0};
+  Float vbWidth{0.0};
+  Float vbHeight{0.0};
+  std::string align{};
+  int meetOrSlice{0};
+  SharedColor tintColor{};
+  SharedColor color{};
+  std::string pointerEvents{};
+};
+
+struct RNSVGSymbolFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGSymbolFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGSymbolFillStruct &value) {
+  return "[Object RNSVGSymbolFillStruct]";
+}
+
+struct RNSVGSymbolStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGSymbolStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGSymbolStrokeStruct &value) {
+  return "[Object RNSVGSymbolStrokeStruct]";
+}
+
+struct RNSVGSymbolFontStruct {
+  std::string fontStyle{};
+  std::string fontVariant{};
+  std::string fontWeight{};
+  std::string fontStretch{};
+  std::string fontSize{};
+  std::string fontFamily{};
+  std::string textAnchor{};
+  std::string textDecoration{};
+  std::string letterSpacing{};
+  std::string wordSpacing{};
+  std::string kerning{};
+  std::string fontFeatureSettings{};
+  std::string fontVariantLigatures{};
+  std::string fontVariationSettings{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGSymbolFontStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_fontStyle = map.find("fontStyle");
+  if (tmp_fontStyle != map.end()) {
+    fromRawValue(context, tmp_fontStyle->second, result.fontStyle);
+  }
+  auto tmp_fontVariant = map.find("fontVariant");
+  if (tmp_fontVariant != map.end()) {
+    fromRawValue(context, tmp_fontVariant->second, result.fontVariant);
+  }
+  auto tmp_fontWeight = map.find("fontWeight");
+  if (tmp_fontWeight != map.end()) {
+    fromRawValue(context, tmp_fontWeight->second, result.fontWeight);
+  }
+  auto tmp_fontStretch = map.find("fontStretch");
+  if (tmp_fontStretch != map.end()) {
+    fromRawValue(context, tmp_fontStretch->second, result.fontStretch);
+  }
+  auto tmp_fontSize = map.find("fontSize");
+  if (tmp_fontSize != map.end()) {
+    fromRawValue(context, tmp_fontSize->second, result.fontSize);
+  }
+  auto tmp_fontFamily = map.find("fontFamily");
+  if (tmp_fontFamily != map.end()) {
+    fromRawValue(context, tmp_fontFamily->second, result.fontFamily);
+  }
+  auto tmp_textAnchor = map.find("textAnchor");
+  if (tmp_textAnchor != map.end()) {
+    fromRawValue(context, tmp_textAnchor->second, result.textAnchor);
+  }
+  auto tmp_textDecoration = map.find("textDecoration");
+  if (tmp_textDecoration != map.end()) {
+    fromRawValue(context, tmp_textDecoration->second, result.textDecoration);
+  }
+  auto tmp_letterSpacing = map.find("letterSpacing");
+  if (tmp_letterSpacing != map.end()) {
+    fromRawValue(context, tmp_letterSpacing->second, result.letterSpacing);
+  }
+  auto tmp_wordSpacing = map.find("wordSpacing");
+  if (tmp_wordSpacing != map.end()) {
+    fromRawValue(context, tmp_wordSpacing->second, result.wordSpacing);
+  }
+  auto tmp_kerning = map.find("kerning");
+  if (tmp_kerning != map.end()) {
+    fromRawValue(context, tmp_kerning->second, result.kerning);
+  }
+  auto tmp_fontFeatureSettings = map.find("fontFeatureSettings");
+  if (tmp_fontFeatureSettings != map.end()) {
+    fromRawValue(context, tmp_fontFeatureSettings->second, result.fontFeatureSettings);
+  }
+  auto tmp_fontVariantLigatures = map.find("fontVariantLigatures");
+  if (tmp_fontVariantLigatures != map.end()) {
+    fromRawValue(context, tmp_fontVariantLigatures->second, result.fontVariantLigatures);
+  }
+  auto tmp_fontVariationSettings = map.find("fontVariationSettings");
+  if (tmp_fontVariationSettings != map.end()) {
+    fromRawValue(context, tmp_fontVariationSettings->second, result.fontVariationSettings);
+  }
+}
+
+static inline std::string toString(const RNSVGSymbolFontStruct &value) {
+  return "[Object RNSVGSymbolFontStruct]";
+}
+class RNSVGSymbolProps final : public ViewProps {
+ public:
+  RNSVGSymbolProps() = default;
+  RNSVGSymbolProps(const PropsParserContext& context, const RNSVGSymbolProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGSymbolFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGSymbolStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string fontSize{};
+  std::string fontWeight{};
+  RNSVGSymbolFontStruct font{};
+  Float minX{0.0};
+  Float minY{0.0};
+  Float vbWidth{0.0};
+  Float vbHeight{0.0};
+  std::string align{};
+  int meetOrSlice{0};
+};
+
+struct RNSVGTextFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGTextFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGTextFillStruct &value) {
+  return "[Object RNSVGTextFillStruct]";
+}
+
+struct RNSVGTextStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGTextStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGTextStrokeStruct &value) {
+  return "[Object RNSVGTextStrokeStruct]";
+}
+
+struct RNSVGTextFontStruct {
+  std::string fontStyle{};
+  std::string fontVariant{};
+  std::string fontWeight{};
+  std::string fontStretch{};
+  std::string fontSize{};
+  std::string fontFamily{};
+  std::string textAnchor{};
+  std::string textDecoration{};
+  std::string letterSpacing{};
+  std::string wordSpacing{};
+  std::string kerning{};
+  std::string fontFeatureSettings{};
+  std::string fontVariantLigatures{};
+  std::string fontVariationSettings{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGTextFontStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_fontStyle = map.find("fontStyle");
+  if (tmp_fontStyle != map.end()) {
+    fromRawValue(context, tmp_fontStyle->second, result.fontStyle);
+  }
+  auto tmp_fontVariant = map.find("fontVariant");
+  if (tmp_fontVariant != map.end()) {
+    fromRawValue(context, tmp_fontVariant->second, result.fontVariant);
+  }
+  auto tmp_fontWeight = map.find("fontWeight");
+  if (tmp_fontWeight != map.end()) {
+    fromRawValue(context, tmp_fontWeight->second, result.fontWeight);
+  }
+  auto tmp_fontStretch = map.find("fontStretch");
+  if (tmp_fontStretch != map.end()) {
+    fromRawValue(context, tmp_fontStretch->second, result.fontStretch);
+  }
+  auto tmp_fontSize = map.find("fontSize");
+  if (tmp_fontSize != map.end()) {
+    fromRawValue(context, tmp_fontSize->second, result.fontSize);
+  }
+  auto tmp_fontFamily = map.find("fontFamily");
+  if (tmp_fontFamily != map.end()) {
+    fromRawValue(context, tmp_fontFamily->second, result.fontFamily);
+  }
+  auto tmp_textAnchor = map.find("textAnchor");
+  if (tmp_textAnchor != map.end()) {
+    fromRawValue(context, tmp_textAnchor->second, result.textAnchor);
+  }
+  auto tmp_textDecoration = map.find("textDecoration");
+  if (tmp_textDecoration != map.end()) {
+    fromRawValue(context, tmp_textDecoration->second, result.textDecoration);
+  }
+  auto tmp_letterSpacing = map.find("letterSpacing");
+  if (tmp_letterSpacing != map.end()) {
+    fromRawValue(context, tmp_letterSpacing->second, result.letterSpacing);
+  }
+  auto tmp_wordSpacing = map.find("wordSpacing");
+  if (tmp_wordSpacing != map.end()) {
+    fromRawValue(context, tmp_wordSpacing->second, result.wordSpacing);
+  }
+  auto tmp_kerning = map.find("kerning");
+  if (tmp_kerning != map.end()) {
+    fromRawValue(context, tmp_kerning->second, result.kerning);
+  }
+  auto tmp_fontFeatureSettings = map.find("fontFeatureSettings");
+  if (tmp_fontFeatureSettings != map.end()) {
+    fromRawValue(context, tmp_fontFeatureSettings->second, result.fontFeatureSettings);
+  }
+  auto tmp_fontVariantLigatures = map.find("fontVariantLigatures");
+  if (tmp_fontVariantLigatures != map.end()) {
+    fromRawValue(context, tmp_fontVariantLigatures->second, result.fontVariantLigatures);
+  }
+  auto tmp_fontVariationSettings = map.find("fontVariationSettings");
+  if (tmp_fontVariationSettings != map.end()) {
+    fromRawValue(context, tmp_fontVariationSettings->second, result.fontVariationSettings);
+  }
+}
+
+static inline std::string toString(const RNSVGTextFontStruct &value) {
+  return "[Object RNSVGTextFontStruct]";
+}
+class RNSVGTextProps final : public ViewProps {
+ public:
+  RNSVGTextProps() = default;
+  RNSVGTextProps(const PropsParserContext& context, const RNSVGTextProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGTextFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGTextStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string fontSize{};
+  std::string fontWeight{};
+  RNSVGTextFontStruct font{};
+  std::vector<std::string> dx{};
+  std::vector<std::string> dy{};
+  std::vector<std::string> x{};
+  std::vector<std::string> y{};
+  std::vector<std::string> rotate{};
+  std::string inlineSize{};
+  std::string textLength{};
+  std::string baselineShift{};
+  std::string lengthAdjust{};
+  std::string alignmentBaseline{};
+  std::string verticalAlign{};
+};
+
+struct RNSVGTextPathFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGTextPathFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGTextPathFillStruct &value) {
+  return "[Object RNSVGTextPathFillStruct]";
+}
+
+struct RNSVGTextPathStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGTextPathStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGTextPathStrokeStruct &value) {
+  return "[Object RNSVGTextPathStrokeStruct]";
+}
+
+struct RNSVGTextPathFontStruct {
+  std::string fontStyle{};
+  std::string fontVariant{};
+  std::string fontWeight{};
+  std::string fontStretch{};
+  std::string fontSize{};
+  std::string fontFamily{};
+  std::string textAnchor{};
+  std::string textDecoration{};
+  std::string letterSpacing{};
+  std::string wordSpacing{};
+  std::string kerning{};
+  std::string fontFeatureSettings{};
+  std::string fontVariantLigatures{};
+  std::string fontVariationSettings{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGTextPathFontStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_fontStyle = map.find("fontStyle");
+  if (tmp_fontStyle != map.end()) {
+    fromRawValue(context, tmp_fontStyle->second, result.fontStyle);
+  }
+  auto tmp_fontVariant = map.find("fontVariant");
+  if (tmp_fontVariant != map.end()) {
+    fromRawValue(context, tmp_fontVariant->second, result.fontVariant);
+  }
+  auto tmp_fontWeight = map.find("fontWeight");
+  if (tmp_fontWeight != map.end()) {
+    fromRawValue(context, tmp_fontWeight->second, result.fontWeight);
+  }
+  auto tmp_fontStretch = map.find("fontStretch");
+  if (tmp_fontStretch != map.end()) {
+    fromRawValue(context, tmp_fontStretch->second, result.fontStretch);
+  }
+  auto tmp_fontSize = map.find("fontSize");
+  if (tmp_fontSize != map.end()) {
+    fromRawValue(context, tmp_fontSize->second, result.fontSize);
+  }
+  auto tmp_fontFamily = map.find("fontFamily");
+  if (tmp_fontFamily != map.end()) {
+    fromRawValue(context, tmp_fontFamily->second, result.fontFamily);
+  }
+  auto tmp_textAnchor = map.find("textAnchor");
+  if (tmp_textAnchor != map.end()) {
+    fromRawValue(context, tmp_textAnchor->second, result.textAnchor);
+  }
+  auto tmp_textDecoration = map.find("textDecoration");
+  if (tmp_textDecoration != map.end()) {
+    fromRawValue(context, tmp_textDecoration->second, result.textDecoration);
+  }
+  auto tmp_letterSpacing = map.find("letterSpacing");
+  if (tmp_letterSpacing != map.end()) {
+    fromRawValue(context, tmp_letterSpacing->second, result.letterSpacing);
+  }
+  auto tmp_wordSpacing = map.find("wordSpacing");
+  if (tmp_wordSpacing != map.end()) {
+    fromRawValue(context, tmp_wordSpacing->second, result.wordSpacing);
+  }
+  auto tmp_kerning = map.find("kerning");
+  if (tmp_kerning != map.end()) {
+    fromRawValue(context, tmp_kerning->second, result.kerning);
+  }
+  auto tmp_fontFeatureSettings = map.find("fontFeatureSettings");
+  if (tmp_fontFeatureSettings != map.end()) {
+    fromRawValue(context, tmp_fontFeatureSettings->second, result.fontFeatureSettings);
+  }
+  auto tmp_fontVariantLigatures = map.find("fontVariantLigatures");
+  if (tmp_fontVariantLigatures != map.end()) {
+    fromRawValue(context, tmp_fontVariantLigatures->second, result.fontVariantLigatures);
+  }
+  auto tmp_fontVariationSettings = map.find("fontVariationSettings");
+  if (tmp_fontVariationSettings != map.end()) {
+    fromRawValue(context, tmp_fontVariationSettings->second, result.fontVariationSettings);
+  }
+}
+
+static inline std::string toString(const RNSVGTextPathFontStruct &value) {
+  return "[Object RNSVGTextPathFontStruct]";
+}
+class RNSVGTextPathProps final : public ViewProps {
+ public:
+  RNSVGTextPathProps() = default;
+  RNSVGTextPathProps(const PropsParserContext& context, const RNSVGTextPathProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGTextPathFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGTextPathStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string fontSize{};
+  std::string fontWeight{};
+  RNSVGTextPathFontStruct font{};
+  std::vector<std::string> dx{};
+  std::vector<std::string> dy{};
+  std::vector<std::string> x{};
+  std::vector<std::string> y{};
+  std::vector<std::string> rotate{};
+  std::string inlineSize{};
+  std::string textLength{};
+  std::string baselineShift{};
+  std::string lengthAdjust{};
+  std::string alignmentBaseline{};
+  std::string verticalAlign{};
+  std::string href{};
+  std::string side{};
+  std::string method{};
+  std::string midLine{};
+  std::string spacing{};
+  std::string startOffset{};
+};
+
+struct RNSVGTSpanFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGTSpanFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGTSpanFillStruct &value) {
+  return "[Object RNSVGTSpanFillStruct]";
+}
+
+struct RNSVGTSpanStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGTSpanStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGTSpanStrokeStruct &value) {
+  return "[Object RNSVGTSpanStrokeStruct]";
+}
+
+struct RNSVGTSpanFontStruct {
+  std::string fontStyle{};
+  std::string fontVariant{};
+  std::string fontWeight{};
+  std::string fontStretch{};
+  std::string fontSize{};
+  std::string fontFamily{};
+  std::string textAnchor{};
+  std::string textDecoration{};
+  std::string letterSpacing{};
+  std::string wordSpacing{};
+  std::string kerning{};
+  std::string fontFeatureSettings{};
+  std::string fontVariantLigatures{};
+  std::string fontVariationSettings{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGTSpanFontStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_fontStyle = map.find("fontStyle");
+  if (tmp_fontStyle != map.end()) {
+    fromRawValue(context, tmp_fontStyle->second, result.fontStyle);
+  }
+  auto tmp_fontVariant = map.find("fontVariant");
+  if (tmp_fontVariant != map.end()) {
+    fromRawValue(context, tmp_fontVariant->second, result.fontVariant);
+  }
+  auto tmp_fontWeight = map.find("fontWeight");
+  if (tmp_fontWeight != map.end()) {
+    fromRawValue(context, tmp_fontWeight->second, result.fontWeight);
+  }
+  auto tmp_fontStretch = map.find("fontStretch");
+  if (tmp_fontStretch != map.end()) {
+    fromRawValue(context, tmp_fontStretch->second, result.fontStretch);
+  }
+  auto tmp_fontSize = map.find("fontSize");
+  if (tmp_fontSize != map.end()) {
+    fromRawValue(context, tmp_fontSize->second, result.fontSize);
+  }
+  auto tmp_fontFamily = map.find("fontFamily");
+  if (tmp_fontFamily != map.end()) {
+    fromRawValue(context, tmp_fontFamily->second, result.fontFamily);
+  }
+  auto tmp_textAnchor = map.find("textAnchor");
+  if (tmp_textAnchor != map.end()) {
+    fromRawValue(context, tmp_textAnchor->second, result.textAnchor);
+  }
+  auto tmp_textDecoration = map.find("textDecoration");
+  if (tmp_textDecoration != map.end()) {
+    fromRawValue(context, tmp_textDecoration->second, result.textDecoration);
+  }
+  auto tmp_letterSpacing = map.find("letterSpacing");
+  if (tmp_letterSpacing != map.end()) {
+    fromRawValue(context, tmp_letterSpacing->second, result.letterSpacing);
+  }
+  auto tmp_wordSpacing = map.find("wordSpacing");
+  if (tmp_wordSpacing != map.end()) {
+    fromRawValue(context, tmp_wordSpacing->second, result.wordSpacing);
+  }
+  auto tmp_kerning = map.find("kerning");
+  if (tmp_kerning != map.end()) {
+    fromRawValue(context, tmp_kerning->second, result.kerning);
+  }
+  auto tmp_fontFeatureSettings = map.find("fontFeatureSettings");
+  if (tmp_fontFeatureSettings != map.end()) {
+    fromRawValue(context, tmp_fontFeatureSettings->second, result.fontFeatureSettings);
+  }
+  auto tmp_fontVariantLigatures = map.find("fontVariantLigatures");
+  if (tmp_fontVariantLigatures != map.end()) {
+    fromRawValue(context, tmp_fontVariantLigatures->second, result.fontVariantLigatures);
+  }
+  auto tmp_fontVariationSettings = map.find("fontVariationSettings");
+  if (tmp_fontVariationSettings != map.end()) {
+    fromRawValue(context, tmp_fontVariationSettings->second, result.fontVariationSettings);
+  }
+}
+
+static inline std::string toString(const RNSVGTSpanFontStruct &value) {
+  return "[Object RNSVGTSpanFontStruct]";
+}
+class RNSVGTSpanProps final : public ViewProps {
+ public:
+  RNSVGTSpanProps() = default;
+  RNSVGTSpanProps(const PropsParserContext& context, const RNSVGTSpanProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGTSpanFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGTSpanStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string fontSize{};
+  std::string fontWeight{};
+  RNSVGTSpanFontStruct font{};
+  std::vector<std::string> dx{};
+  std::vector<std::string> dy{};
+  std::vector<std::string> x{};
+  std::vector<std::string> y{};
+  std::vector<std::string> rotate{};
+  std::string inlineSize{};
+  std::string textLength{};
+  std::string baselineShift{};
+  std::string lengthAdjust{};
+  std::string alignmentBaseline{};
+  std::string verticalAlign{};
+  std::string content{};
+};
+
+struct RNSVGUseFillStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGUseFillStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGUseFillStruct &value) {
+  return "[Object RNSVGUseFillStruct]";
+}
+
+struct RNSVGUseStrokeStruct {
+  int type{-1};
+  SharedColor payload{};
+  std::string brushRef{};
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNSVGUseStrokeStruct &result) {
+  auto map = (std::unordered_map<std::string, RawValue>)value;
+
+  auto tmp_type = map.find("type");
+  if (tmp_type != map.end()) {
+    fromRawValue(context, tmp_type->second, result.type);
+  }
+  auto tmp_payload = map.find("payload");
+  if (tmp_payload != map.end()) {
+    fromRawValue(context, tmp_payload->second, result.payload);
+  }
+  auto tmp_brushRef = map.find("brushRef");
+  if (tmp_brushRef != map.end()) {
+    fromRawValue(context, tmp_brushRef->second, result.brushRef);
+  }
+}
+
+static inline std::string toString(const RNSVGUseStrokeStruct &value) {
+  return "[Object RNSVGUseStrokeStruct]";
+}
+class RNSVGUseProps final : public ViewProps {
+ public:
+  RNSVGUseProps() = default;
+  RNSVGUseProps(const PropsParserContext& context, const RNSVGUseProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string name{};
+  Float opacity{1.0};
+  std::vector<Float> matrix{};
+  std::string mask{};
+  std::string markerStart{};
+  std::string markerMid{};
+  std::string markerEnd{};
+  std::string clipPath{};
+  int clipRule{0};
+  bool responsible{false};
+  std::string display{};
+  std::string pointerEvents{};
+  RNSVGUseFillStruct fill{};
+  Float fillOpacity{1.0};
+  int fillRule{1};
+  RNSVGUseStrokeStruct stroke{};
+  Float strokeOpacity{1.0};
+  std::string strokeWidth{"1"};
+  int strokeLinecap{0};
+  int strokeLinejoin{0};
+  std::vector<std::string> strokeDasharray{};
+  Float strokeDashoffset{0.0};
+  Float strokeMiterlimit{0.0};
+  int vectorEffect{0};
+  std::vector<std::string> propList{};
+  std::string href{};
+  std::string x{};
+  std::string y{};
+  std::string height{};
+  std::string width{};
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ShadowNodes.cpp b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ShadowNodes.cpp
new file mode 100644
index 0000000..c909d49
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ShadowNodes.cpp
@@ -0,0 +1,37 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/rnsvg/ShadowNodes.h>
+
+namespace facebook::react {
+
+extern const char RNSVGCircleComponentName[] = "RNSVGCircle";
+extern const char RNSVGClipPathComponentName[] = "RNSVGClipPath";
+extern const char RNSVGDefsComponentName[] = "RNSVGDefs";
+extern const char RNSVGEllipseComponentName[] = "RNSVGEllipse";
+extern const char RNSVGForeignObjectComponentName[] = "RNSVGForeignObject";
+extern const char RNSVGGroupComponentName[] = "RNSVGGroup";
+extern const char RNSVGImageComponentName[] = "RNSVGImage";
+extern const char RNSVGLinearGradientComponentName[] = "RNSVGLinearGradient";
+extern const char RNSVGLineComponentName[] = "RNSVGLine";
+extern const char RNSVGMarkerComponentName[] = "RNSVGMarker";
+extern const char RNSVGMaskComponentName[] = "RNSVGMask";
+extern const char RNSVGPathComponentName[] = "RNSVGPath";
+extern const char RNSVGPatternComponentName[] = "RNSVGPattern";
+extern const char RNSVGRadialGradientComponentName[] = "RNSVGRadialGradient";
+extern const char RNSVGRectComponentName[] = "RNSVGRect";
+extern const char RNSVGSvgViewComponentName[] = "RNSVGSvgView";
+extern const char RNSVGSymbolComponentName[] = "RNSVGSymbol";
+extern const char RNSVGTextComponentName[] = "RNSVGText";
+extern const char RNSVGTextPathComponentName[] = "RNSVGTextPath";
+extern const char RNSVGTSpanComponentName[] = "RNSVGTSpan";
+extern const char RNSVGUseComponentName[] = "RNSVGUse";
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ShadowNodes.h b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ShadowNodes.h
new file mode 100644
index 0000000..0e100aa
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/ShadowNodes.h
@@ -0,0 +1,252 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/rnsvg/EventEmitters.h>
+#include <react/renderer/components/rnsvg/Props.h>
+#include <react/renderer/components/rnsvg/States.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+#include <jsi/jsi.h>
+
+namespace facebook::react {
+
+JSI_EXPORT extern const char RNSVGCircleComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGCircle> component.
+ */
+using RNSVGCircleShadowNode = ConcreteViewShadowNode<
+    RNSVGCircleComponentName,
+    RNSVGCircleProps,
+    RNSVGCircleEventEmitter,
+    RNSVGCircleState>;
+
+JSI_EXPORT extern const char RNSVGClipPathComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGClipPath> component.
+ */
+using RNSVGClipPathShadowNode = ConcreteViewShadowNode<
+    RNSVGClipPathComponentName,
+    RNSVGClipPathProps,
+    RNSVGClipPathEventEmitter,
+    RNSVGClipPathState>;
+
+JSI_EXPORT extern const char RNSVGDefsComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGDefs> component.
+ */
+using RNSVGDefsShadowNode = ConcreteViewShadowNode<
+    RNSVGDefsComponentName,
+    RNSVGDefsProps,
+    RNSVGDefsEventEmitter,
+    RNSVGDefsState>;
+
+JSI_EXPORT extern const char RNSVGEllipseComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGEllipse> component.
+ */
+using RNSVGEllipseShadowNode = ConcreteViewShadowNode<
+    RNSVGEllipseComponentName,
+    RNSVGEllipseProps,
+    RNSVGEllipseEventEmitter,
+    RNSVGEllipseState>;
+
+JSI_EXPORT extern const char RNSVGForeignObjectComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGForeignObject> component.
+ */
+using RNSVGForeignObjectShadowNode = ConcreteViewShadowNode<
+    RNSVGForeignObjectComponentName,
+    RNSVGForeignObjectProps,
+    RNSVGForeignObjectEventEmitter,
+    RNSVGForeignObjectState>;
+
+JSI_EXPORT extern const char RNSVGGroupComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGGroup> component.
+ */
+using RNSVGGroupShadowNode = ConcreteViewShadowNode<
+    RNSVGGroupComponentName,
+    RNSVGGroupProps,
+    RNSVGGroupEventEmitter,
+    RNSVGGroupState>;
+
+JSI_EXPORT extern const char RNSVGImageComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGImage> component.
+ */
+using RNSVGImageShadowNode = ConcreteViewShadowNode<
+    RNSVGImageComponentName,
+    RNSVGImageProps,
+    RNSVGImageEventEmitter,
+    RNSVGImageState>;
+
+JSI_EXPORT extern const char RNSVGLinearGradientComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGLinearGradient> component.
+ */
+using RNSVGLinearGradientShadowNode = ConcreteViewShadowNode<
+    RNSVGLinearGradientComponentName,
+    RNSVGLinearGradientProps,
+    RNSVGLinearGradientEventEmitter,
+    RNSVGLinearGradientState>;
+
+JSI_EXPORT extern const char RNSVGLineComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGLine> component.
+ */
+using RNSVGLineShadowNode = ConcreteViewShadowNode<
+    RNSVGLineComponentName,
+    RNSVGLineProps,
+    RNSVGLineEventEmitter,
+    RNSVGLineState>;
+
+JSI_EXPORT extern const char RNSVGMarkerComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGMarker> component.
+ */
+using RNSVGMarkerShadowNode = ConcreteViewShadowNode<
+    RNSVGMarkerComponentName,
+    RNSVGMarkerProps,
+    RNSVGMarkerEventEmitter,
+    RNSVGMarkerState>;
+
+JSI_EXPORT extern const char RNSVGMaskComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGMask> component.
+ */
+using RNSVGMaskShadowNode = ConcreteViewShadowNode<
+    RNSVGMaskComponentName,
+    RNSVGMaskProps,
+    RNSVGMaskEventEmitter,
+    RNSVGMaskState>;
+
+JSI_EXPORT extern const char RNSVGPathComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGPath> component.
+ */
+using RNSVGPathShadowNode = ConcreteViewShadowNode<
+    RNSVGPathComponentName,
+    RNSVGPathProps,
+    RNSVGPathEventEmitter,
+    RNSVGPathState>;
+
+JSI_EXPORT extern const char RNSVGPatternComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGPattern> component.
+ */
+using RNSVGPatternShadowNode = ConcreteViewShadowNode<
+    RNSVGPatternComponentName,
+    RNSVGPatternProps,
+    RNSVGPatternEventEmitter,
+    RNSVGPatternState>;
+
+JSI_EXPORT extern const char RNSVGRadialGradientComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGRadialGradient> component.
+ */
+using RNSVGRadialGradientShadowNode = ConcreteViewShadowNode<
+    RNSVGRadialGradientComponentName,
+    RNSVGRadialGradientProps,
+    RNSVGRadialGradientEventEmitter,
+    RNSVGRadialGradientState>;
+
+JSI_EXPORT extern const char RNSVGRectComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGRect> component.
+ */
+using RNSVGRectShadowNode = ConcreteViewShadowNode<
+    RNSVGRectComponentName,
+    RNSVGRectProps,
+    RNSVGRectEventEmitter,
+    RNSVGRectState>;
+
+JSI_EXPORT extern const char RNSVGSvgViewComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGSvgView> component.
+ */
+using RNSVGSvgViewShadowNode = ConcreteViewShadowNode<
+    RNSVGSvgViewComponentName,
+    RNSVGSvgViewProps,
+    RNSVGSvgViewEventEmitter,
+    RNSVGSvgViewState>;
+
+JSI_EXPORT extern const char RNSVGSymbolComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGSymbol> component.
+ */
+using RNSVGSymbolShadowNode = ConcreteViewShadowNode<
+    RNSVGSymbolComponentName,
+    RNSVGSymbolProps,
+    RNSVGSymbolEventEmitter,
+    RNSVGSymbolState>;
+
+JSI_EXPORT extern const char RNSVGTextComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGText> component.
+ */
+using RNSVGTextShadowNode = ConcreteViewShadowNode<
+    RNSVGTextComponentName,
+    RNSVGTextProps,
+    RNSVGTextEventEmitter,
+    RNSVGTextState>;
+
+JSI_EXPORT extern const char RNSVGTextPathComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGTextPath> component.
+ */
+using RNSVGTextPathShadowNode = ConcreteViewShadowNode<
+    RNSVGTextPathComponentName,
+    RNSVGTextPathProps,
+    RNSVGTextPathEventEmitter,
+    RNSVGTextPathState>;
+
+JSI_EXPORT extern const char RNSVGTSpanComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGTSpan> component.
+ */
+using RNSVGTSpanShadowNode = ConcreteViewShadowNode<
+    RNSVGTSpanComponentName,
+    RNSVGTSpanProps,
+    RNSVGTSpanEventEmitter,
+    RNSVGTSpanState>;
+
+JSI_EXPORT extern const char RNSVGUseComponentName[];
+
+/*
+ * `ShadowNode` for <RNSVGUse> component.
+ */
+using RNSVGUseShadowNode = ConcreteViewShadowNode<
+    RNSVGUseComponentName,
+    RNSVGUseProps,
+    RNSVGUseEventEmitter,
+    RNSVGUseState>;
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/States.cpp b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/States.cpp
new file mode 100644
index 0000000..a36fa6f
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/States.cpp
@@ -0,0 +1,16 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateStateCpp.js
+ */
+#include <react/renderer/components/rnsvg/States.h>
+
+namespace facebook::react {
+
+
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/States.h b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/States.h
new file mode 100644
index 0000000..407d567
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/States.h
@@ -0,0 +1,269 @@
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateStateH.js
+ */
+#pragma once
+
+#ifdef ANDROID
+#include <folly/dynamic.h>
+#endif
+
+namespace facebook::react {
+
+class RNSVGCircleState {
+public:
+  RNSVGCircleState() = default;
+
+#ifdef ANDROID
+  RNSVGCircleState(RNSVGCircleState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGClipPathState {
+public:
+  RNSVGClipPathState() = default;
+
+#ifdef ANDROID
+  RNSVGClipPathState(RNSVGClipPathState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGDefsState {
+public:
+  RNSVGDefsState() = default;
+
+#ifdef ANDROID
+  RNSVGDefsState(RNSVGDefsState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGEllipseState {
+public:
+  RNSVGEllipseState() = default;
+
+#ifdef ANDROID
+  RNSVGEllipseState(RNSVGEllipseState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGForeignObjectState {
+public:
+  RNSVGForeignObjectState() = default;
+
+#ifdef ANDROID
+  RNSVGForeignObjectState(RNSVGForeignObjectState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGGroupState {
+public:
+  RNSVGGroupState() = default;
+
+#ifdef ANDROID
+  RNSVGGroupState(RNSVGGroupState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGImageState {
+public:
+  RNSVGImageState() = default;
+
+#ifdef ANDROID
+  RNSVGImageState(RNSVGImageState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGLinearGradientState {
+public:
+  RNSVGLinearGradientState() = default;
+
+#ifdef ANDROID
+  RNSVGLinearGradientState(RNSVGLinearGradientState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGLineState {
+public:
+  RNSVGLineState() = default;
+
+#ifdef ANDROID
+  RNSVGLineState(RNSVGLineState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGMarkerState {
+public:
+  RNSVGMarkerState() = default;
+
+#ifdef ANDROID
+  RNSVGMarkerState(RNSVGMarkerState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGMaskState {
+public:
+  RNSVGMaskState() = default;
+
+#ifdef ANDROID
+  RNSVGMaskState(RNSVGMaskState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGPathState {
+public:
+  RNSVGPathState() = default;
+
+#ifdef ANDROID
+  RNSVGPathState(RNSVGPathState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGPatternState {
+public:
+  RNSVGPatternState() = default;
+
+#ifdef ANDROID
+  RNSVGPatternState(RNSVGPatternState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGRadialGradientState {
+public:
+  RNSVGRadialGradientState() = default;
+
+#ifdef ANDROID
+  RNSVGRadialGradientState(RNSVGRadialGradientState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGRectState {
+public:
+  RNSVGRectState() = default;
+
+#ifdef ANDROID
+  RNSVGRectState(RNSVGRectState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGSvgViewState {
+public:
+  RNSVGSvgViewState() = default;
+
+#ifdef ANDROID
+  RNSVGSvgViewState(RNSVGSvgViewState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGSymbolState {
+public:
+  RNSVGSymbolState() = default;
+
+#ifdef ANDROID
+  RNSVGSymbolState(RNSVGSymbolState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGTextState {
+public:
+  RNSVGTextState() = default;
+
+#ifdef ANDROID
+  RNSVGTextState(RNSVGTextState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGTextPathState {
+public:
+  RNSVGTextPathState() = default;
+
+#ifdef ANDROID
+  RNSVGTextPathState(RNSVGTextPathState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGTSpanState {
+public:
+  RNSVGTSpanState() = default;
+
+#ifdef ANDROID
+  RNSVGTSpanState(RNSVGTSpanState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+class RNSVGUseState {
+public:
+  RNSVGUseState() = default;
+
+#ifdef ANDROID
+  RNSVGUseState(RNSVGUseState const &previousState, folly::dynamic data){};
+  folly::dynamic getDynamic() const {
+    return {};
+  };
+#endif
+};
+
+} // namespace facebook::react
\ No newline at end of file
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/rnsvgJSI-generated.cpp b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/rnsvgJSI-generated.cpp
new file mode 100644
index 0000000..cdbaa96
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/rnsvgJSI-generated.cpp
@@ -0,0 +1,17 @@
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateModuleCpp.js
+ */
+
+#include "rnsvgJSI.h"
+
+namespace facebook::react {
+
+
+
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/rnsvgJSI.h b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/rnsvgJSI.h
new file mode 100644
index 0000000..ec16260
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/react/renderer/components/rnsvg/rnsvgJSI.h
@@ -0,0 +1,19 @@
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateModuleH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/TurboModule.h>
+#include <react/bridging/Bridging.h>
+
+namespace facebook::react {
+
+
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/rnsvg-generated.cpp b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/rnsvg-generated.cpp
new file mode 100644
index 0000000..364608b
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/rnsvg-generated.cpp
@@ -0,0 +1,22 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateModuleJniCpp.js
+ */
+
+#include "rnsvg.h"
+
+namespace facebook::react {
+
+
+
+std::shared_ptr<TurboModule> rnsvg_ModuleProvider(const std::string &moduleName, const JavaTurboModule::InitParams &params) {
+
+  return nullptr;
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/jni/rnsvg.h b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/rnsvg.h
new file mode 100644
index 0000000..6264b98
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/jni/rnsvg.h
@@ -0,0 +1,24 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateModuleJniH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/JavaTurboModule.h>
+#include <ReactCommon/TurboModule.h>
+#include <jsi/jsi.h>
+
+namespace facebook::react {
+
+
+
+JSI_EXPORT
+std::shared_ptr<TurboModule> rnsvg_ModuleProvider(const std::string &moduleName, const JavaTurboModule::InitParams &params);
+
+} // namespace facebook::react
diff --git a/node_modules/react-native-svg/android/build/generated/source/codegen/schema.json b/node_modules/react-native-svg/android/build/generated/source/codegen/schema.json
new file mode 100644
index 0000000..c4d1bf8
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/generated/source/codegen/schema.json
@@ -0,0 +1,7531 @@
+{
+  "modules": {
+    "RNSVGCircle": {
+      "type": "Component",
+      "components": {
+        "RNSVGCircle": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "cx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "cy",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "r",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGClipPath": {
+      "type": "Component",
+      "components": {
+        "RNSVGClipPath": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "fontStyle",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariant",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontWeight",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontStretch",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontSize",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFamily",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textAnchor",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textDecoration",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "letterSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "wordSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "kerning",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFeatureSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariantLigatures",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariationSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGDefs": {
+      "type": "Component",
+      "components": {
+        "RNSVGDefs": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGEllipse": {
+      "type": "Component",
+      "components": {
+        "RNSVGEllipse": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "cx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "cy",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "rx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "ry",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGForeignObject": {
+      "type": "Component",
+      "components": {
+        "RNSVGForeignObject": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "fontStyle",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariant",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontWeight",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontStretch",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontSize",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFamily",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textAnchor",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textDecoration",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "letterSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "wordSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "kerning",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFeatureSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariantLigatures",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariationSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGGroup": {
+      "type": "Component",
+      "components": {
+        "RNSVGGroup": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "fontStyle",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariant",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontWeight",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontStretch",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontSize",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFamily",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textAnchor",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textDecoration",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "letterSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "wordSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "kerning",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFeatureSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariantLigatures",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariationSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGImage": {
+      "type": "Component",
+      "components": {
+        "RNSVGImage": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "src",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ImageSourcePrimitive"
+              }
+            },
+            {
+              "name": "align",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "meetOrSlice",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGLinearGradient": {
+      "type": "Component",
+      "components": {
+        "RNSVGLinearGradient": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "x1",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "y1",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "x2",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "y2",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "gradient",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "gradientUnits",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "gradientTransform",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGLine": {
+      "type": "Component",
+      "components": {
+        "RNSVGLine": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "x1",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "y1",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "x2",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "y2",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGMarker": {
+      "type": "Component",
+      "components": {
+        "RNSVGMarker": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "fontStyle",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariant",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontWeight",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontStretch",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontSize",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFamily",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textAnchor",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textDecoration",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "letterSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "wordSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "kerning",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFeatureSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariantLigatures",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariationSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "refX",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "refY",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerHeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerUnits",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "orient",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "minX",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "minY",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbHeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "align",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "meetOrSlice",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGMask": {
+      "type": "Component",
+      "components": {
+        "RNSVGMask": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "fontStyle",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariant",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontWeight",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontStretch",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontSize",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFamily",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textAnchor",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textDecoration",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "letterSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "wordSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "kerning",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFeatureSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariantLigatures",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariationSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "maskUnits",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "maskContentUnits",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "maskTransform",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGPath": {
+      "type": "Component",
+      "components": {
+        "RNSVGPath": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "d",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGPattern": {
+      "type": "Component",
+      "components": {
+        "RNSVGPattern": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "fontStyle",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariant",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontWeight",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontStretch",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontSize",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFamily",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textAnchor",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textDecoration",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "letterSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "wordSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "kerning",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFeatureSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariantLigatures",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariationSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "patternUnits",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "patternContentUnits",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "patternTransform",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "minX",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "minY",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbHeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "align",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "meetOrSlice",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGRadialGradient": {
+      "type": "Component",
+      "components": {
+        "RNSVGRadialGradient": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fy",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "cx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "cy",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "rx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "ry",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "gradient",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "gradientUnits",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "gradientTransform",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGRect": {
+      "type": "Component",
+      "components": {
+        "RNSVGRect": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "rx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "ry",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGSvgView": {
+      "type": "Component",
+      "components": {
+        "RNSVGSvgView": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "bbWidth",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "bbHeight",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "minX",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "minY",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbWidth",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbHeight",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "align",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "meetOrSlice",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "tintColor",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "color",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "ReservedPropTypeAnnotation",
+                "name": "ColorPrimitive"
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGSymbol": {
+      "type": "Component",
+      "components": {
+        "RNSVGSymbol": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "fontStyle",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariant",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontWeight",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontStretch",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontSize",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFamily",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textAnchor",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textDecoration",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "letterSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "wordSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "kerning",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFeatureSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariantLigatures",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariationSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "minX",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "minY",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vbHeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "align",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "meetOrSlice",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGText": {
+      "type": "Component",
+      "components": {
+        "RNSVGText": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "fontStyle",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariant",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontWeight",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontStretch",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontSize",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFamily",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textAnchor",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textDecoration",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "letterSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "wordSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "kerning",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFeatureSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariantLigatures",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariationSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "dx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "dy",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "rotate",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "inlineSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "textLength",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "baselineShift",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "lengthAdjust",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "alignmentBaseline",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "verticalAlign",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGTextPath": {
+      "type": "Component",
+      "components": {
+        "RNSVGTextPath": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "fontStyle",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariant",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontWeight",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontStretch",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontSize",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFamily",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textAnchor",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textDecoration",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "letterSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "wordSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "kerning",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFeatureSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariantLigatures",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariationSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "dx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "dy",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "rotate",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "inlineSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "textLength",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "baselineShift",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "lengthAdjust",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "alignmentBaseline",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "verticalAlign",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "href",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "side",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "method",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "midLine",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "spacing",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "startOffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGTSpan": {
+      "type": "Component",
+      "components": {
+        "RNSVGTSpan": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "fontSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fontWeight",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "font",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "fontStyle",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariant",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontWeight",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontStretch",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontSize",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFamily",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textAnchor",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "textDecoration",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "letterSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "wordSpacing",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "kerning",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontFeatureSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariantLigatures",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  },
+                  {
+                    "name": "fontVariationSettings",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "dx",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "dy",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "rotate",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "inlineSize",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "textLength",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "baselineShift",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "lengthAdjust",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "alignmentBaseline",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "verticalAlign",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "content",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    },
+    "RNSVGUse": {
+      "type": "Component",
+      "components": {
+        "RNSVGUse": {
+          "extendsProps": [
+            {
+              "type": "ReactNativeBuiltInType",
+              "knownTypeName": "ReactNativeCoreViewProps"
+            }
+          ],
+          "events": [],
+          "props": [
+            {
+              "name": "name",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "opacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "matrix",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "FloatTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "mask",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerStart",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerMid",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "markerEnd",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipPath",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "clipRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "responsible",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation",
+                "default": false
+              }
+            },
+            {
+              "name": "display",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "pointerEvents",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "fill",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "fillOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "fillRule",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "stroke",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "type",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "Int32TypeAnnotation",
+                      "default": -1
+                    }
+                  },
+                  {
+                    "name": "payload",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "ReservedPropTypeAnnotation",
+                      "name": "ColorPrimitive"
+                    }
+                  },
+                  {
+                    "name": "brushRef",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation",
+                      "default": null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              "name": "strokeOpacity",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 1
+              }
+            },
+            {
+              "name": "strokeWidth",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": "1"
+              }
+            },
+            {
+              "name": "strokeLinecap",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeLinejoin",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeDasharray",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "strokeDashoffset",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "strokeMiterlimit",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "FloatTypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "vectorEffect",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "Int32TypeAnnotation",
+                "default": 0
+              }
+            },
+            {
+              "name": "propList",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "href",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "x",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "y",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "height",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            },
+            {
+              "name": "width",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation",
+                "default": null
+              }
+            }
+          ],
+          "commands": []
+        }
+      }
+    }
+  }
+}
\ No newline at end of file
diff --git a/node_modules/react-native-svg/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/AndroidManifest.xml b/node_modules/react-native-svg/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/AndroidManifest.xml
new file mode 100644
index 0000000..037933a
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/AndroidManifest.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.horcrux.svg" >
+
+    <uses-sdk android:minSdkVersion="24" />
+
+</manifest>
\ No newline at end of file
diff --git a/node_modules/react-native-svg/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/output-metadata.json b/node_modules/react-native-svg/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/output-metadata.json
new file mode 100644
index 0000000..8fa1366
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/output-metadata.json
@@ -0,0 +1,18 @@
+{
+  "version": 3,
+  "artifactType": {
+    "type": "AAPT_FRIENDLY_MERGED_MANIFESTS",
+    "kind": "Directory"
+  },
+  "applicationId": "com.horcrux.svg",
+  "variantName": "debug",
+  "elements": [
+    {
+      "type": "SINGLE",
+      "filters": [],
+      "attributes": [],
+      "outputFile": "AndroidManifest.xml"
+    }
+  ],
+  "elementType": "File"
+}
\ No newline at end of file
diff --git a/node_modules/react-native-svg/android/build/intermediates/aar_metadata/debug/writeDebugAarMetadata/aar-metadata.properties b/node_modules/react-native-svg/android/build/intermediates/aar_metadata/debug/writeDebugAarMetadata/aar-metadata.properties
new file mode 100644
index 0000000..1211b1e
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/aar_metadata/debug/writeDebugAarMetadata/aar-metadata.properties
@@ -0,0 +1,6 @@
+aarFormatVersion=1.0
+aarMetadataVersion=1.0
+minCompileSdk=1
+minCompileSdkExtension=0
+minAndroidGradlePluginVersion=1.0.0
+coreLibraryDesugaringEnabled=false
diff --git a/node_modules/react-native-svg/android/build/intermediates/annotation_processor_list/debug/javaPreCompileDebug/annotationProcessors.json b/node_modules/react-native-svg/android/build/intermediates/annotation_processor_list/debug/javaPreCompileDebug/annotationProcessors.json
new file mode 100644
index 0000000..9e26dfe
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/annotation_processor_list/debug/javaPreCompileDebug/annotationProcessors.json
@@ -0,0 +1 @@
+{}
\ No newline at end of file
diff --git a/node_modules/react-native-svg/android/build/intermediates/compile_r_class_jar/debug/generateDebugRFile/R.jar b/node_modules/react-native-svg/android/build/intermediates/compile_r_class_jar/debug/generateDebugRFile/R.jar
new file mode 100644
index 0000000..2268cce
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/compile_r_class_jar/debug/generateDebugRFile/R.jar differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/compile_symbol_list/debug/generateDebugRFile/R.txt b/node_modules/react-native-svg/android/build/intermediates/compile_symbol_list/debug/generateDebugRFile/R.txt
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native-svg/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties b/node_modules/react-native-svg/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties
new file mode 100644
index 0000000..28236b5
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties
@@ -0,0 +1 @@
+#Thu May 22 22:21:59 EEST 2025
diff --git a/node_modules/react-native-svg/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml b/node_modules/react-native-svg/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml
new file mode 100644
index 0000000..bdd892e
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\ekayn\Desktop\GymTastic\node_modules\react-native-svg\android\src\main\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main" generated-set="main$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\ekayn\Desktop\GymTastic\node_modules\react-native-svg\android\src\main\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\ekayn\Desktop\GymTastic\node_modules\react-native-svg\android\src\debug\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug" generated-set="debug$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\ekayn\Desktop\GymTastic\node_modules\react-native-svg\android\src\debug\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="generated$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\ekayn\Desktop\GymTastic\node_modules\react-native-svg\android\build\generated\res\resValues\debug"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="generated" generated-set="generated$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\ekayn\Desktop\GymTastic\node_modules\react-native-svg\android\build\generated\res\resValues\debug"/></dataSet><mergedItems/></merger>
\ No newline at end of file
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/Brush$BrushType.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/Brush$BrushType.class
new file mode 100644
index 0000000..562a5a5
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/Brush$BrushType.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/Brush$BrushUnits.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/Brush$BrushUnits.class
new file mode 100644
index 0000000..439c187
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/Brush$BrushUnits.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/Brush.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/Brush.class
new file mode 100644
index 0000000..96a2602
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/Brush.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/CircleView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/CircleView.class
new file mode 100644
index 0000000..e19845e
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/CircleView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/ClipPathView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/ClipPathView.class
new file mode 100644
index 0000000..d727f4d
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/ClipPathView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/DefinitionView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/DefinitionView.class
new file mode 100644
index 0000000..805f943
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/DefinitionView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/DefsView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/DefsView.class
new file mode 100644
index 0000000..c8cc28d
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/DefsView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/ElementType.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/ElementType.class
new file mode 100644
index 0000000..7f819eb
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/ElementType.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/EllipseView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/EllipseView.class
new file mode 100644
index 0000000..29503bd
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/EllipseView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/FontData$AbsoluteFontWeight.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/FontData$AbsoluteFontWeight.class
new file mode 100644
index 0000000..dd2f1ff
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/FontData$AbsoluteFontWeight.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/FontData.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/FontData.class
new file mode 100644
index 0000000..41b38db
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/FontData.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/ForeignObjectView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/ForeignObjectView.class
new file mode 100644
index 0000000..b507b12
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/ForeignObjectView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/GlyphContext.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/GlyphContext.class
new file mode 100644
index 0000000..2436831
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/GlyphContext.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/GlyphPathBag.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/GlyphPathBag.class
new file mode 100644
index 0000000..84261af
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/GlyphPathBag.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/GroupView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/GroupView.class
new file mode 100644
index 0000000..e9976f1
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/GroupView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/ImageView$1.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/ImageView$1.class
new file mode 100644
index 0000000..9958c42
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/ImageView$1.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/ImageView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/ImageView.class
new file mode 100644
index 0000000..5281a54
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/ImageView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/LineView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/LineView.class
new file mode 100644
index 0000000..7de5d83
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/LineView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/LinearGradientView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/LinearGradientView.class
new file mode 100644
index 0000000..fdc6aee
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/LinearGradientView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/MarkerView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/MarkerView.class
new file mode 100644
index 0000000..7e16e8e
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/MarkerView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/MaskView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/MaskView.class
new file mode 100644
index 0000000..19c9d6d
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/MaskView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PathElement.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PathElement.class
new file mode 100644
index 0000000..7c06d3d
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PathElement.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PathParser.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PathParser.class
new file mode 100644
index 0000000..b01de2f
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PathParser.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PathView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PathView.class
new file mode 100644
index 0000000..1b99b02
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PathView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PatternView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PatternView.class
new file mode 100644
index 0000000..fe9f9bc
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PatternView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/Point.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/Point.class
new file mode 100644
index 0000000..1c3279f
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/Point.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PropHelper$1.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PropHelper$1.class
new file mode 100644
index 0000000..7b16cba
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PropHelper$1.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PropHelper.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PropHelper.class
new file mode 100644
index 0000000..bb830b7
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/PropHelper.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RNSVGMarkerPosition$1.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RNSVGMarkerPosition$1.class
new file mode 100644
index 0000000..23eb211
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RNSVGMarkerPosition$1.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RNSVGMarkerPosition.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RNSVGMarkerPosition.class
new file mode 100644
index 0000000..30bec05
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RNSVGMarkerPosition.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RNSVGMarkerType.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RNSVGMarkerType.class
new file mode 100644
index 0000000..2b055a1
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RNSVGMarkerType.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RadialGradientView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RadialGradientView.class
new file mode 100644
index 0000000..dfb6ddd
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RadialGradientView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RectView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RectView.class
new file mode 100644
index 0000000..7afe868
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RectView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RenderableView$1.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RenderableView$1.class
new file mode 100644
index 0000000..98a3425
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RenderableView$1.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RenderableView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RenderableView.class
new file mode 100644
index 0000000..1481788
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/RenderableView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SVGLength$1.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SVGLength$1.class
new file mode 100644
index 0000000..719245e
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SVGLength$1.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SVGLength$UnitType.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SVGLength$UnitType.class
new file mode 100644
index 0000000..2359eea
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SVGLength$UnitType.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SVGLength.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SVGLength.class
new file mode 100644
index 0000000..1689bb4
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SVGLength.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SegmentData.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SegmentData.class
new file mode 100644
index 0000000..6213a6b
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SegmentData.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SvgView$Events.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SvgView$Events.class
new file mode 100644
index 0000000..56ca9eb
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SvgView$Events.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SvgView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SvgView.class
new file mode 100644
index 0000000..1087fa1
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/SvgView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$AlignmentBaseline.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$AlignmentBaseline.class
new file mode 100644
index 0000000..a8727e5
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$AlignmentBaseline.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$Direction.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$Direction.class
new file mode 100644
index 0000000..7efa48d
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$Direction.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$FontStyle.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$FontStyle.class
new file mode 100644
index 0000000..3a4298a
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$FontStyle.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$FontVariantLigatures.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$FontVariantLigatures.class
new file mode 100644
index 0000000..ecff894
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$FontVariantLigatures.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$FontWeight.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$FontWeight.class
new file mode 100644
index 0000000..4a5ed88
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$FontWeight.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextAnchor.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextAnchor.class
new file mode 100644
index 0000000..63ad8cb
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextAnchor.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextDecoration.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextDecoration.class
new file mode 100644
index 0000000..51c66ce
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextDecoration.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextLengthAdjust.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextLengthAdjust.class
new file mode 100644
index 0000000..6bec321
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextLengthAdjust.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextPathMethod.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextPathMethod.class
new file mode 100644
index 0000000..42968b4
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextPathMethod.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextPathMidLine.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextPathMidLine.class
new file mode 100644
index 0000000..b5bbf1b
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextPathMidLine.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextPathSide.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextPathSide.class
new file mode 100644
index 0000000..6a3b495
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextPathSide.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextPathSpacing.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextPathSpacing.class
new file mode 100644
index 0000000..ec3e564
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties$TextPathSpacing.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties.class
new file mode 100644
index 0000000..4025816
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextProperties.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextView.class
new file mode 100644
index 0000000..cc33aac
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/TextView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/VirtualView$1.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/VirtualView$1.class
new file mode 100644
index 0000000..5e24fb8
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/VirtualView$1.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/VirtualView.class b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/VirtualView.class
new file mode 100644
index 0000000..33c4040
Binary files /dev/null and b/node_modules/react-native-svg/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/horcrux/svg/VirtualView.class differ
diff --git a/node_modules/react-native-svg/android/build/intermediates/local_only_symbol_list/debug/parseDebugLocalResources/R-def.txt b/node_modules/react-native-svg/android/build/intermediates/local_only_symbol_list/debug/parseDebugLocalResources/R-def.txt
new file mode 100644
index 0000000..78ac5b8
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/local_only_symbol_list/debug/parseDebugLocalResources/R-def.txt
@@ -0,0 +1,2 @@
+R_DEF: Internal format may change without notice
+local
diff --git a/node_modules/react-native-svg/android/build/intermediates/manifest_merge_blame_file/debug/processDebugManifest/manifest-merger-blame-debug-report.txt b/node_modules/react-native-svg/android/build/intermediates/manifest_merge_blame_file/debug/processDebugManifest/manifest-merger-blame-debug-report.txt
new file mode 100644
index 0000000..e764d9f
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/manifest_merge_blame_file/debug/processDebugManifest/manifest-merger-blame-debug-report.txt
@@ -0,0 +1,7 @@
+1<?xml version="1.0" encoding="utf-8"?>
+2<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+3    package="com.horcrux.svg" >
+4
+5    <uses-sdk android:minSdkVersion="24" />
+6
+7</manifest>
diff --git a/node_modules/react-native-svg/android/build/intermediates/merged_manifest/debug/processDebugManifest/AndroidManifest.xml b/node_modules/react-native-svg/android/build/intermediates/merged_manifest/debug/processDebugManifest/AndroidManifest.xml
new file mode 100644
index 0000000..037933a
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/merged_manifest/debug/processDebugManifest/AndroidManifest.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.horcrux.svg" >
+
+    <uses-sdk android:minSdkVersion="24" />
+
+</manifest>
\ No newline at end of file
diff --git a/node_modules/react-native-svg/android/build/intermediates/navigation_json/debug/extractDeepLinksDebug/navigation.json b/node_modules/react-native-svg/android/build/intermediates/navigation_json/debug/extractDeepLinksDebug/navigation.json
new file mode 100644
index 0000000..0637a08
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/navigation_json/debug/extractDeepLinksDebug/navigation.json
@@ -0,0 +1 @@
+[]
\ No newline at end of file
diff --git a/node_modules/react-native-svg/android/build/intermediates/nested_resources_validation_report/debug/generateDebugResources/nestedResourcesValidationReport.txt b/node_modules/react-native-svg/android/build/intermediates/nested_resources_validation_report/debug/generateDebugResources/nestedResourcesValidationReport.txt
new file mode 100644
index 0000000..08f4ebe
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/nested_resources_validation_report/debug/generateDebugResources/nestedResourcesValidationReport.txt
@@ -0,0 +1 @@
+0 Warning/Error
\ No newline at end of file
diff --git a/node_modules/react-native-svg/android/build/intermediates/symbol_list_with_package_name/debug/generateDebugRFile/package-aware-r.txt b/node_modules/react-native-svg/android/build/intermediates/symbol_list_with_package_name/debug/generateDebugRFile/package-aware-r.txt
new file mode 100644
index 0000000..6ba6ea2
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/intermediates/symbol_list_with_package_name/debug/generateDebugRFile/package-aware-r.txt
@@ -0,0 +1 @@
+com.horcrux.svg
diff --git a/node_modules/react-native-svg/android/build/outputs/logs/manifest-merger-debug-report.txt b/node_modules/react-native-svg/android/build/outputs/logs/manifest-merger-debug-report.txt
new file mode 100644
index 0000000..d4ad8e8
--- /dev/null
+++ b/node_modules/react-native-svg/android/build/outputs/logs/manifest-merger-debug-report.txt
@@ -0,0 +1,15 @@
+-- Merging decision tree log ---
+manifest
+ADDED from C:\Users\ekayn\Desktop\GymTastic\node_modules\react-native-svg\android\src\main\AndroidManifest.xml:1:1-2:12
+INJECTED from C:\Users\ekayn\Desktop\GymTastic\node_modules\react-native-svg\android\src\main\AndroidManifest.xml:1:1-2:12
+	package
+		ADDED from C:\Users\ekayn\Desktop\GymTastic\node_modules\react-native-svg\android\src\main\AndroidManifest.xml:1:11-36
+		INJECTED from C:\Users\ekayn\Desktop\GymTastic\node_modules\react-native-svg\android\src\main\AndroidManifest.xml
+uses-sdk
+INJECTED from C:\Users\ekayn\Desktop\GymTastic\node_modules\react-native-svg\android\src\main\AndroidManifest.xml reason: use-sdk injection requested
+INJECTED from C:\Users\ekayn\Desktop\GymTastic\node_modules\react-native-svg\android\src\main\AndroidManifest.xml
+INJECTED from C:\Users\ekayn\Desktop\GymTastic\node_modules\react-native-svg\android\src\main\AndroidManifest.xml
+	android:targetSdkVersion
+		INJECTED from C:\Users\ekayn\Desktop\GymTastic\node_modules\react-native-svg\android\src\main\AndroidManifest.xml
+	android:minSdkVersion
+		INJECTED from C:\Users\ekayn\Desktop\GymTastic\node_modules\react-native-svg\android\src\main\AndroidManifest.xml
diff --git a/node_modules/react-native-svg/android/src/main/java/com/horcrux/svg/VirtualView.java b/node_modules/react-native-svg/android/src/main/java/com/horcrux/svg/VirtualView.java
index 1123e12..33fa0c5 100644
--- a/node_modules/react-native-svg/android/src/main/java/com/horcrux/svg/VirtualView.java
+++ b/node_modules/react-native-svg/android/src/main/java/com/horcrux/svg/VirtualView.java
@@ -7,10 +7,12 @@ import android.graphics.Canvas;
 import android.graphics.Matrix;
 import android.graphics.Paint;
 import android.graphics.Path;
+import android.graphics.Rect;
 import android.graphics.RectF;
 import android.graphics.Region;
 import android.view.View;
 import android.view.ViewParent;
+import android.view.accessibility.AccessibilityNodeInfo;
 import com.facebook.common.logging.FLog;
 import com.facebook.react.bridge.Dynamic;
 import com.facebook.react.bridge.ReactContext;
@@ -20,7 +22,7 @@ import com.facebook.react.common.ReactConstants;
 import com.facebook.react.uimanager.DisplayMetricsHolder;
 import com.facebook.react.uimanager.OnLayoutEvent;
 import com.facebook.react.uimanager.PointerEvents;
-import com.facebook.react.uimanager.UIManagerModule;
+import com.facebook.react.uimanager.UIManagerHelper;
 import com.facebook.react.uimanager.events.EventDispatcher;
 import com.facebook.react.views.view.ReactViewGroup;
 import java.util.ArrayList;
@@ -73,7 +75,6 @@ public abstract class VirtualView extends ReactViewGroup {
 
   final float mScale;
   private boolean mResponsible;
-  private boolean mOnLayout;
   String mDisplay;
   String mName;
 
@@ -103,8 +104,39 @@ public abstract class VirtualView extends ReactViewGroup {
   ArrayList<PathElement> elements;
   PointerEvents mPointerEvents;
 
-  void setPointerEvents(PointerEvents pointerEvents) {
+  public void setPointerEvents(PointerEvents pointerEvents) {
     mPointerEvents = pointerEvents;
+    invalidate();
+  }
+
+  public void setOnLayout(boolean onLayout) {
+    invalidate();
+  }
+
+  @Override
+  public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) {
+    super.onInitializeAccessibilityNodeInfo(info);
+    if (mClientRect != null) {
+
+      SvgView root = getSvgView();
+
+      int[] rootPositionOnScreen = new int[2];
+      getSvgView().getLocationOnScreen(rootPositionOnScreen);
+      Rect infoBoundsInScreen = new Rect();
+      infoBoundsInScreen.left = rootPositionOnScreen[0] + (int) Math.floor(mClientRect.left);
+      infoBoundsInScreen.top = rootPositionOnScreen[1] + (int) Math.floor(mClientRect.top);
+      infoBoundsInScreen.right = infoBoundsInScreen.left + (int) Math.ceil(mClientRect.width());
+      infoBoundsInScreen.bottom = infoBoundsInScreen.top + (int) Math.ceil(mClientRect.height());
+
+      Rect rootVisibleRect = new Rect();
+      boolean isRootVisible = root.getGlobalVisibleRect(rootVisibleRect);
+      boolean infoIsVisibleToUser = isRootVisible && infoBoundsInScreen.intersect(rootVisibleRect);
+
+      String infoClassName = this.getClass().getCanonicalName();
+      info.setBoundsInScreen(infoBoundsInScreen);
+      info.setClassName(infoClassName);
+      info.setVisibleToUser(infoIsVisibleToUser);
+    }
   }
 
   @Override
@@ -249,11 +281,6 @@ public abstract class VirtualView extends ReactViewGroup {
     invalidate();
   }
 
-  public void setOnLayout(boolean onLayout) {
-    mOnLayout = onLayout;
-    invalidate();
-  }
-
   public void setMask(String mask) {
     mMask = mask;
     invalidate();
@@ -291,30 +318,27 @@ public abstract class VirtualView extends ReactViewGroup {
   }
 
   public void setMatrix(Dynamic matrixArray) {
-    ReadableType type = matrixArray.getType();
-    if (!matrixArray.isNull() && type.equals(ReadableType.Array)) {
-      ReadableArray matrix = matrixArray.asArray();
-      setMatrix(matrix);
+    boolean isArrayType = !matrixArray.isNull() && matrixArray.getType().equals(ReadableType.Array);
+    setMatrix(isArrayType ? matrixArray.asArray() : null);
+  }
+
+  public void setMatrix(@Nullable ReadableArray matrixArray) {
+    if (matrixArray != null) {
+      int matrixSize = PropHelper.toMatrixData(matrixArray, sRawMatrix, mScale);
+      if (matrixSize == 6) {
+        if (mMatrix == null) {
+          mMatrix = new Matrix();
+          mInvMatrix = new Matrix();
+        }
+        mMatrix.setValues(sRawMatrix);
+        mInvertible = mMatrix.invert(mInvMatrix);
+      } else if (matrixSize != -1) {
+        FLog.w(ReactConstants.TAG, "RNSVG: Transform matrices must be of size 6");
+      }
     } else {
       mMatrix.reset();
       mInvMatrix.reset();
       mInvertible = true;
-      super.invalidate();
-      clearParentCache();
-    }
-  }
-
-  public void setMatrix(ReadableArray matrixArray) {
-    int matrixSize = PropHelper.toMatrixData(matrixArray, sRawMatrix, mScale);
-    if (matrixSize == 6) {
-      if (mMatrix == null) {
-        mMatrix = new Matrix();
-        mInvMatrix = new Matrix();
-      }
-      mMatrix.setValues(sRawMatrix);
-      mInvertible = mMatrix.invert(mInvMatrix);
-    } else if (matrixSize != -1) {
-      FLog.w(ReactConstants.TAG, "RNSVG: Transform matrices must be of size 6");
     }
     super.invalidate();
     clearParentCache();
@@ -376,6 +400,7 @@ public abstract class VirtualView extends ReactViewGroup {
 
   abstract Path getPath(Canvas canvas, Paint paint);
 
+  @Nullable
   SvgView getSvgView() {
     if (svgView != null) {
       return svgView;
@@ -577,12 +602,11 @@ public abstract class VirtualView extends ReactViewGroup {
       setRight(right);
       setBottom(bottom);
     }
-    if (!mOnLayout) {
-      return;
-    }
     EventDispatcher eventDispatcher =
-        mContext.getNativeModule(UIManagerModule.class).getEventDispatcher();
-    eventDispatcher.dispatchEvent(OnLayoutEvent.obtain(this.getId(), left, top, width, height));
+        UIManagerHelper.getEventDispatcherForReactTag(mContext, getId());
+    if (eventDispatcher != null) {
+      eventDispatcher.dispatchEvent(OnLayoutEvent.obtain(this.getId(), left, top, width, height));
+    }
   }
 
   RectF getClientRect() {
